// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.2
// source: live.proto

package live

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               // 用户ID
	Username       string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                    // 账号名
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                    // 昵称
	Avatar         string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                                        // 头像
	Gender         uint32 `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`                                       // 性别
	Role           uint32 `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`                                           // 角色
	FollowerCount  int32  `protobuf:"varint,7,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`    // 粉丝数
	FollowingCount int32  `protobuf:"varint,8,opt,name=following_count,json=followingCount,proto3" json:"following_count,omitempty"` // 关注数
	LikeCount      int32  `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`                // 被点赞数
	StarCount      int32  `protobuf:"varint,10,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`               // 被收藏数
	SelfStarCount  int32  `protobuf:"varint,11,opt,name=self_star_count,json=selfStarCount,proto3" json:"self_star_count,omitempty"` // 自己收藏作品数
	SelfLikeCount  int32  `protobuf:"varint,12,opt,name=self_like_count,json=selfLikeCount,proto3" json:"self_like_count,omitempty"` // 自己点赞作品数
	LiveCount      int32  `protobuf:"varint,13,opt,name=live_count,json=liveCount,proto3" json:"live_count,omitempty"`               // 直播次数
	WorkCount      int32  `protobuf:"varint,14,opt,name=work_count,json=workCount,proto3" json:"work_count,omitempty"`               // 作品数
	FriendCount    int32  `protobuf:"varint,15,opt,name=friend_count,json=friendCount,proto3" json:"friend_count,omitempty"`         // 朋友数
	Phone          string `protobuf:"bytes,16,opt,name=phone,proto3" json:"phone,omitempty"`                                         // 手机号
	Email          string `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`                                         // 邮箱
	Status         uint32 `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *User) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *User) GetFollowerCount() int32 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *User) GetFollowingCount() int32 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *User) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *User) GetStarCount() int32 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

func (x *User) GetSelfStarCount() int32 {
	if x != nil {
		return x.SelfStarCount
	}
	return 0
}

func (x *User) GetSelfLikeCount() int32 {
	if x != nil {
		return x.SelfLikeCount
	}
	return 0
}

func (x *User) GetLiveCount() int32 {
	if x != nil {
		return x.LiveCount
	}
	return 0
}

func (x *User) GetWorkCount() int32 {
	if x != nil {
		return x.WorkCount
	}
	return 0
}

func (x *User) GetFriendCount() int32 {
	if x != nil {
		return x.FriendCount
	}
	return 0
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type LiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId       uint32   `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	UserId       uint32   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title        string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Cover        string   `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Status       uint32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	StartTime    int64    `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64    `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	WatchCount   int32    `protobuf:"varint,8,opt,name=watch_count,json=watchCount,proto3" json:"watch_count,omitempty"`
	LikeCount    int32    `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	CommentCount int32    `protobuf:"varint,10,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	ShareCount   int32    `protobuf:"varint,11,opt,name=share_count,json=shareCount,proto3" json:"share_count,omitempty"`
	IsLike       bool     `protobuf:"varint,12,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	IsFollow     bool     `protobuf:"varint,13,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	IsStar       bool     `protobuf:"varint,14,opt,name=is_star,json=isStar,proto3" json:"is_star,omitempty"` // 这个字段没有实际含义
	IsSelf       bool     `protobuf:"varint,15,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"` // 是否是自己的直播
	Author       *User    `protobuf:"bytes,16,opt,name=author,proto3" json:"author,omitempty"`
	Type         int32    `protobuf:"varint,17,opt,name=type,proto3" json:"type,omitempty"`
	Description  string   `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	PlayerUrl    string   `protobuf:"bytes,19,opt,name=player_url,json=playerUrl,proto3" json:"player_url,omitempty"`
	CoverUrl     string   `protobuf:"bytes,20,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	IsOver       bool     `protobuf:"varint,21,opt,name=is_over,json=isOver,proto3" json:"is_over,omitempty"`
	Category     []string `protobuf:"bytes,22,rep,name=category,proto3" json:"category,omitempty"`
	Tags         []string `protobuf:"bytes,23,rep,name=tags,proto3" json:"tags,omitempty"`
	Partition    string   `protobuf:"bytes,24,opt,name=partition,proto3" json:"partition,omitempty"`
	RoomId       uint32   `protobuf:"varint,25,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Token        string   `protobuf:"bytes,26,opt,name=token,proto3" json:"token,omitempty"` // 推流token或者拉流token
}

func (x *LiveInfo) Reset() {
	*x = LiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveInfo) ProtoMessage() {}

func (x *LiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveInfo.ProtoReflect.Descriptor instead.
func (*LiveInfo) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{1}
}

func (x *LiveInfo) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *LiveInfo) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LiveInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *LiveInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LiveInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *LiveInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *LiveInfo) GetWatchCount() int32 {
	if x != nil {
		return x.WatchCount
	}
	return 0
}

func (x *LiveInfo) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *LiveInfo) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *LiveInfo) GetShareCount() int32 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *LiveInfo) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

func (x *LiveInfo) GetIsFollow() bool {
	if x != nil {
		return x.IsFollow
	}
	return false
}

func (x *LiveInfo) GetIsStar() bool {
	if x != nil {
		return x.IsStar
	}
	return false
}

func (x *LiveInfo) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

func (x *LiveInfo) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *LiveInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LiveInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LiveInfo) GetPlayerUrl() string {
	if x != nil {
		return x.PlayerUrl
	}
	return ""
}

func (x *LiveInfo) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *LiveInfo) GetIsOver() bool {
	if x != nil {
		return x.IsOver
	}
	return false
}

func (x *LiveInfo) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *LiveInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LiveInfo) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *LiveInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LiveInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LiveListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Total  int32       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	List   []*LiveInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LiveListResp) Reset() {
	*x = LiveListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveListResp) ProtoMessage() {}

func (x *LiveListResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveListResp.ProtoReflect.Descriptor instead.
func (*LiveListResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{2}
}

func (x *LiveListResp) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveListResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LiveListResp) GetList() []*LiveInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type StartLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover       string   `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category    []string `protobuf:"bytes,4,rep,name=category,proto3" json:"category,omitempty"`
	Tags        []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Partition   string   `protobuf:"bytes,6,opt,name=partition,proto3" json:"partition,omitempty"`
	Uid         int32    `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *StartLiveReq) Reset() {
	*x = StartLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLiveReq) ProtoMessage() {}

func (x *StartLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLiveReq.ProtoReflect.Descriptor instead.
func (*StartLiveReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{3}
}

func (x *StartLiveReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StartLiveReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *StartLiveReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartLiveReq) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *StartLiveReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *StartLiveReq) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *StartLiveReq) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type EndLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId uint32 `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	UserId uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *EndLiveReq) Reset() {
	*x = EndLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndLiveReq) ProtoMessage() {}

func (x *EndLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndLiveReq.ProtoReflect.Descriptor instead.
func (*EndLiveReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{4}
}

func (x *EndLiveReq) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *EndLiveReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LiveListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *int32  `protobuf:"varint,1,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize      *int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	RecommendType *string `protobuf:"bytes,3,opt,name=recommend_type,json=recommendType,proto3,oneof" json:"recommend_type,omitempty"`
	ItemId        *uint32 `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3,oneof" json:"item_id,omitempty"`
	Category      *string `protobuf:"bytes,5,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Total         *int32  `protobuf:"varint,6,opt,name=total,proto3,oneof" json:"total,omitempty"`
	UserId        uint32  `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LiveListReq) Reset() {
	*x = LiveListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveListReq) ProtoMessage() {}

func (x *LiveListReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveListReq.ProtoReflect.Descriptor instead.
func (*LiveListReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{5}
}

func (x *LiveListReq) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *LiveListReq) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *LiveListReq) GetRecommendType() string {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return ""
}

func (x *LiveListReq) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *LiveListReq) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *LiveListReq) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *LiveListReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LiveDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId uint32 `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
}

func (x *LiveDetailReq) Reset() {
	*x = LiveDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDetailReq) ProtoMessage() {}

func (x *LiveDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDetailReq.ProtoReflect.Descriptor instead.
func (*LiveDetailReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{6}
}

func (x *LiveDetailReq) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

type LiveDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveInfo *LiveInfo `protobuf:"bytes,1,opt,name=live_info,json=liveInfo,proto3" json:"live_info,omitempty"`
}

func (x *LiveDetailResp) Reset() {
	*x = LiveDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDetailResp) ProtoMessage() {}

func (x *LiveDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDetailResp.ProtoReflect.Descriptor instead.
func (*LiveDetailResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{7}
}

func (x *LiveDetailResp) GetLiveInfo() *LiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

type LiveCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LiveId   uint32 `protobuf:"varint,2,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	SendTime uint64 `protobuf:"varint,4,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
}

func (x *LiveCommentReq) Reset() {
	*x = LiveCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCommentReq) ProtoMessage() {}

func (x *LiveCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCommentReq.ProtoReflect.Descriptor instead.
func (*LiveCommentReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{8}
}

func (x *LiveCommentReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveCommentReq) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *LiveCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LiveCommentReq) GetSendTime() uint64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

type LiveDeleteCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint32 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	UserId    uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LiveDeleteCommentReq) Reset() {
	*x = LiveDeleteCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDeleteCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDeleteCommentReq) ProtoMessage() {}

func (x *LiveDeleteCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDeleteCommentReq.ProtoReflect.Descriptor instead.
func (*LiveDeleteCommentReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{9}
}

func (x *LiveDeleteCommentReq) GetCommentId() uint32 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *LiveDeleteCommentReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LiveCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint32 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *LiveCommentResp) Reset() {
	*x = LiveCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCommentResp) ProtoMessage() {}

func (x *LiveCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCommentResp.ProtoReflect.Descriptor instead.
func (*LiveCommentResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{10}
}

func (x *LiveCommentResp) GetCommentId() uint32 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type LiveCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LiveId   uint32 `protobuf:"varint,2,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *LiveCommentListReq) Reset() {
	*x = LiveCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCommentListReq) ProtoMessage() {}

func (x *LiveCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCommentListReq.ProtoReflect.Descriptor instead.
func (*LiveCommentListReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{11}
}

func (x *LiveCommentListReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveCommentListReq) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *LiveCommentListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LiveCommentListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type LiveCommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*LiveComment `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *LiveCommentListResp) Reset() {
	*x = LiveCommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveCommentListResp) ProtoMessage() {}

func (x *LiveCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveCommentListResp.ProtoReflect.Descriptor instead.
func (*LiveCommentListResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{12}
}

func (x *LiveCommentListResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *LiveCommentListResp) GetList() []*LiveComment {
	if x != nil {
		return x.List
	}
	return nil
}

type LiveComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint32 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	UserId    uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LiveId    uint32 `protobuf:"varint,3,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreateAt  int64  `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *LiveComment) Reset() {
	*x = LiveComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveComment) ProtoMessage() {}

func (x *LiveComment) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveComment.ProtoReflect.Descriptor instead.
func (*LiveComment) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{13}
}

func (x *LiveComment) GetCommentId() uint32 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *LiveComment) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveComment) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *LiveComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LiveComment) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type LiveLikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LiveId uint32 `protobuf:"varint,2,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	Action int32  `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *LiveLikeReq) Reset() {
	*x = LiveLikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLikeReq) ProtoMessage() {}

func (x *LiveLikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLikeReq.ProtoReflect.Descriptor instead.
func (*LiveLikeReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{14}
}

func (x *LiveLikeReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveLikeReq) GetLiveId() uint32 {
	if x != nil {
		return x.LiveId
	}
	return 0
}

func (x *LiveLikeReq) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type LiveLikeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeCount int32 `protobuf:"varint,1,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
}

func (x *LiveLikeResp) Reset() {
	*x = LiveLikeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLikeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLikeResp) ProtoMessage() {}

func (x *LiveLikeResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLikeResp.ProtoReflect.Descriptor instead.
func (*LiveLikeResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{15}
}

func (x *LiveLikeResp) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type OnPublicStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App           string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                            // 流应用名
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                              // TCP 链接唯一 ID
	Ip            string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`                                              // 推流器 IP
	Params        string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`                                      // 推流 URL 参数
	Port          uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`                                         // 推流器端口号
	Schema        string `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`                                      // 推流协议, 可能是 rtsp、rtmp
	Stream        string `protobuf:"bytes,7,opt,name=stream,proto3" json:"stream,omitempty"`                                      // 流 ID
	Vhost         string `protobuf:"bytes,8,opt,name=vhost,proto3" json:"vhost,omitempty"`                                        // 流虚拟主机
	MediaServerId string `protobuf:"bytes,9,opt,name=media_server_id,json=mediaServerId,proto3" json:"media_server_id,omitempty"` // 服务器 ID, 通过配置文件设置
}

func (x *OnPublicStreamReq) Reset() {
	*x = OnPublicStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnPublicStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPublicStreamReq) ProtoMessage() {}

func (x *OnPublicStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPublicStreamReq.ProtoReflect.Descriptor instead.
func (*OnPublicStreamReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{16}
}

func (x *OnPublicStreamReq) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *OnPublicStreamReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OnPublicStreamReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *OnPublicStreamReq) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *OnPublicStreamReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *OnPublicStreamReq) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *OnPublicStreamReq) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *OnPublicStreamReq) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *OnPublicStreamReq) GetMediaServerId() string {
	if x != nil {
		return x.MediaServerId
	}
	return ""
}

type OnPublicStreamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码，0 代表允许推流
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 不允许推流时的错误提示
}

func (x *OnPublicStreamResp) Reset() {
	*x = OnPublicStreamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnPublicStreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPublicStreamResp) ProtoMessage() {}

func (x *OnPublicStreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPublicStreamResp.ProtoReflect.Descriptor instead.
func (*OnPublicStreamResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{17}
}

func (x *OnPublicStreamResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OnPublicStreamResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type OnStreamChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App           string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`                                            // 流应用名
	Regist        bool   `protobuf:"varint,2,opt,name=regist,proto3" json:"regist,omitempty"`                                     // 流注册或注销
	Schema        string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`                                      // rtsp 或 rtmp
	Stream        string `protobuf:"bytes,4,opt,name=stream,proto3" json:"stream,omitempty"`                                      // 流 ID
	Vhost         string `protobuf:"bytes,5,opt,name=vhost,proto3" json:"vhost,omitempty"`                                        // 流虚拟主机
	MediaServerId string `protobuf:"bytes,6,opt,name=media_server_id,json=mediaServerId,proto3" json:"media_server_id,omitempty"` // 服务器 ID, 通过配置文件设置
}

func (x *OnStreamChangeReq) Reset() {
	*x = OnStreamChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnStreamChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnStreamChangeReq) ProtoMessage() {}

func (x *OnStreamChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnStreamChangeReq.ProtoReflect.Descriptor instead.
func (*OnStreamChangeReq) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{18}
}

func (x *OnStreamChangeReq) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *OnStreamChangeReq) GetRegist() bool {
	if x != nil {
		return x.Regist
	}
	return false
}

func (x *OnStreamChangeReq) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *OnStreamChangeReq) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *OnStreamChangeReq) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *OnStreamChangeReq) GetMediaServerId() string {
	if x != nil {
		return x.MediaServerId
	}
	return ""
}

type OnStreamChangeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误代码，0 代表允许推流
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 不允许推流时的错误提示
}

func (x *OnStreamChangeResp) Reset() {
	*x = OnStreamChangeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnStreamChangeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnStreamChangeResp) ProtoMessage() {}

func (x *OnStreamChangeResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnStreamChangeResp.ProtoReflect.Descriptor instead.
func (*OnStreamChangeResp) Descriptor() ([]byte, []int) {
	return file_live_proto_rawDescGZIP(), []int{19}
}

func (x *OnStreamChangeResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OnStreamChangeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_live_proto protoreflect.FileDescriptor

var file_live_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd4, 0x05, 0x0a, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x61, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x28, 0x0a, 0x0d, 0x4c, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4e,
	0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x77, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x0a, 0x13, 0x4c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d,
	0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x01,
	0x0a, 0x11, 0x4f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x12, 0x4f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x11,
	0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x4f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xb7, 0x04, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x12, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x10, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08,
	0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x4c,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x72, 0x73, 0x65, 0x12, 0x11,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32,
	0xa6, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x4f, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x4f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0e, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x6c, 0x69,
	0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_live_proto_rawDescOnce sync.Once
	file_live_proto_rawDescData = file_live_proto_rawDesc
)

func file_live_proto_rawDescGZIP() []byte {
	file_live_proto_rawDescOnce.Do(func() {
		file_live_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_proto_rawDescData)
	})
	return file_live_proto_rawDescData
}

var file_live_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_live_proto_goTypes = []interface{}{
	(*User)(nil),                 // 0: live.User
	(*LiveInfo)(nil),             // 1: live.LiveInfo
	(*LiveListResp)(nil),         // 2: live.LiveListResp
	(*StartLiveReq)(nil),         // 3: live.StartLiveReq
	(*EndLiveReq)(nil),           // 4: live.EndLiveReq
	(*LiveListReq)(nil),          // 5: live.LiveListReq
	(*LiveDetailReq)(nil),        // 6: live.LiveDetailReq
	(*LiveDetailResp)(nil),       // 7: live.LiveDetailResp
	(*LiveCommentReq)(nil),       // 8: live.LiveCommentReq
	(*LiveDeleteCommentReq)(nil), // 9: live.LiveDeleteCommentReq
	(*LiveCommentResp)(nil),      // 10: live.LiveCommentResp
	(*LiveCommentListReq)(nil),   // 11: live.LiveCommentListReq
	(*LiveCommentListResp)(nil),  // 12: live.LiveCommentListResp
	(*LiveComment)(nil),          // 13: live.LiveComment
	(*LiveLikeReq)(nil),          // 14: live.LiveLikeReq
	(*LiveLikeResp)(nil),         // 15: live.LiveLikeResp
	(*OnPublicStreamReq)(nil),    // 16: live.OnPublicStreamReq
	(*OnPublicStreamResp)(nil),   // 17: live.OnPublicStreamResp
	(*OnStreamChangeReq)(nil),    // 18: live.OnStreamChangeReq
	(*OnStreamChangeResp)(nil),   // 19: live.OnStreamChangeResp
}
var file_live_proto_depIdxs = []int32{
	0,  // 0: live.LiveInfo.author:type_name -> live.User
	1,  // 1: live.LiveListResp.list:type_name -> live.LiveInfo
	1,  // 2: live.LiveDetailResp.live_info:type_name -> live.LiveInfo
	13, // 3: live.LiveCommentListResp.list:type_name -> live.LiveComment
	3,  // 4: live.LiveBusinessRpcService.StartLive:input_type -> live.StartLiveReq
	4,  // 5: live.LiveBusinessRpcService.EndLive:input_type -> live.EndLiveReq
	8,  // 6: live.LiveBusinessRpcService.LiveComment:input_type -> live.LiveCommentReq
	14, // 7: live.LiveBusinessRpcService.LiveLike:input_type -> live.LiveLikeReq
	9,  // 8: live.LiveBusinessRpcService.LiveDeleteComment:input_type -> live.LiveDeleteCommentReq
	5,  // 9: live.LiveBusinessRpcService.LiveListByGorse:input_type -> live.LiveListReq
	5,  // 10: live.LiveBusinessRpcService.LiveList:input_type -> live.LiveListReq
	11, // 11: live.LiveBusinessRpcService.LiveCommentList:input_type -> live.LiveCommentListReq
	6,  // 12: live.LiveBusinessRpcService.LiveInfo:input_type -> live.LiveDetailReq
	16, // 13: live.LiveCallbackRpcService.OnPublicStream:input_type -> live.OnPublicStreamReq
	18, // 14: live.LiveCallbackRpcService.OnStreamChange:input_type -> live.OnStreamChangeReq
	7,  // 15: live.LiveBusinessRpcService.StartLive:output_type -> live.LiveDetailResp
	7,  // 16: live.LiveBusinessRpcService.EndLive:output_type -> live.LiveDetailResp
	10, // 17: live.LiveBusinessRpcService.LiveComment:output_type -> live.LiveCommentResp
	15, // 18: live.LiveBusinessRpcService.LiveLike:output_type -> live.LiveLikeResp
	10, // 19: live.LiveBusinessRpcService.LiveDeleteComment:output_type -> live.LiveCommentResp
	2,  // 20: live.LiveBusinessRpcService.LiveListByGorse:output_type -> live.LiveListResp
	2,  // 21: live.LiveBusinessRpcService.LiveList:output_type -> live.LiveListResp
	12, // 22: live.LiveBusinessRpcService.LiveCommentList:output_type -> live.LiveCommentListResp
	7,  // 23: live.LiveBusinessRpcService.LiveInfo:output_type -> live.LiveDetailResp
	17, // 24: live.LiveCallbackRpcService.OnPublicStream:output_type -> live.OnPublicStreamResp
	19, // 25: live.LiveCallbackRpcService.OnStreamChange:output_type -> live.OnStreamChangeResp
	15, // [15:26] is the sub-list for method output_type
	4,  // [4:15] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_live_proto_init() }
func file_live_proto_init() {
	if File_live_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_live_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDeleteCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveCommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLikeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnPublicStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnPublicStreamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnStreamChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnStreamChangeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_live_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_live_proto_goTypes,
		DependencyIndexes: file_live_proto_depIdxs,
		MessageInfos:      file_live_proto_msgTypes,
	}.Build()
	File_live_proto = out.File
	file_live_proto_rawDesc = nil
	file_live_proto_goTypes = nil
	file_live_proto_depIdxs = nil
}
