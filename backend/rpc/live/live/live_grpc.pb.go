// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: live.proto

package live

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveBusinessRpcService_StartLive_FullMethodName         = "/live.LiveBusinessRpcService/StartLive"
	LiveBusinessRpcService_EndLive_FullMethodName           = "/live.LiveBusinessRpcService/EndLive"
	LiveBusinessRpcService_LiveComment_FullMethodName       = "/live.LiveBusinessRpcService/LiveComment"
	LiveBusinessRpcService_LiveLike_FullMethodName          = "/live.LiveBusinessRpcService/LiveLike"
	LiveBusinessRpcService_LiveDeleteComment_FullMethodName = "/live.LiveBusinessRpcService/LiveDeleteComment"
	LiveBusinessRpcService_LiveListByGorse_FullMethodName   = "/live.LiveBusinessRpcService/LiveListByGorse"
	LiveBusinessRpcService_LiveList_FullMethodName          = "/live.LiveBusinessRpcService/LiveList"
	LiveBusinessRpcService_LiveCommentList_FullMethodName   = "/live.LiveBusinessRpcService/LiveCommentList"
	LiveBusinessRpcService_LiveInfo_FullMethodName          = "/live.LiveBusinessRpcService/LiveInfo"
)

// LiveBusinessRpcServiceClient is the client API for LiveBusinessRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveBusinessRpcServiceClient interface {
	StartLive(ctx context.Context, in *StartLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error)
	EndLive(ctx context.Context, in *EndLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error)
	LiveComment(ctx context.Context, in *LiveCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error)
	LiveLike(ctx context.Context, in *LiveLikeReq, opts ...grpc.CallOption) (*LiveLikeResp, error)
	LiveDeleteComment(ctx context.Context, in *LiveDeleteCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error)
	LiveListByGorse(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error)
	LiveList(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error)
	LiveCommentList(ctx context.Context, in *LiveCommentListReq, opts ...grpc.CallOption) (*LiveCommentListResp, error)
	LiveInfo(ctx context.Context, in *LiveDetailReq, opts ...grpc.CallOption) (*LiveDetailResp, error)
}

type liveBusinessRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveBusinessRpcServiceClient(cc grpc.ClientConnInterface) LiveBusinessRpcServiceClient {
	return &liveBusinessRpcServiceClient{cc}
}

func (c *liveBusinessRpcServiceClient) StartLive(ctx context.Context, in *StartLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error) {
	out := new(LiveDetailResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_StartLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) EndLive(ctx context.Context, in *EndLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error) {
	out := new(LiveDetailResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_EndLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveComment(ctx context.Context, in *LiveCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error) {
	out := new(LiveCommentResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveLike(ctx context.Context, in *LiveLikeReq, opts ...grpc.CallOption) (*LiveLikeResp, error) {
	out := new(LiveLikeResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveDeleteComment(ctx context.Context, in *LiveDeleteCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error) {
	out := new(LiveCommentResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveDeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveListByGorse(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error) {
	out := new(LiveListResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveListByGorse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveList(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error) {
	out := new(LiveListResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveCommentList(ctx context.Context, in *LiveCommentListReq, opts ...grpc.CallOption) (*LiveCommentListResp, error) {
	out := new(LiveCommentListResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveBusinessRpcServiceClient) LiveInfo(ctx context.Context, in *LiveDetailReq, opts ...grpc.CallOption) (*LiveDetailResp, error) {
	out := new(LiveDetailResp)
	err := c.cc.Invoke(ctx, LiveBusinessRpcService_LiveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveBusinessRpcServiceServer is the server API for LiveBusinessRpcService service.
// All implementations must embed UnimplementedLiveBusinessRpcServiceServer
// for forward compatibility
type LiveBusinessRpcServiceServer interface {
	StartLive(context.Context, *StartLiveReq) (*LiveDetailResp, error)
	EndLive(context.Context, *EndLiveReq) (*LiveDetailResp, error)
	LiveComment(context.Context, *LiveCommentReq) (*LiveCommentResp, error)
	LiveLike(context.Context, *LiveLikeReq) (*LiveLikeResp, error)
	LiveDeleteComment(context.Context, *LiveDeleteCommentReq) (*LiveCommentResp, error)
	LiveListByGorse(context.Context, *LiveListReq) (*LiveListResp, error)
	LiveList(context.Context, *LiveListReq) (*LiveListResp, error)
	LiveCommentList(context.Context, *LiveCommentListReq) (*LiveCommentListResp, error)
	LiveInfo(context.Context, *LiveDetailReq) (*LiveDetailResp, error)
	mustEmbedUnimplementedLiveBusinessRpcServiceServer()
}

// UnimplementedLiveBusinessRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveBusinessRpcServiceServer struct {
}

func (UnimplementedLiveBusinessRpcServiceServer) StartLive(context.Context, *StartLiveReq) (*LiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLive not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) EndLive(context.Context, *EndLiveReq) (*LiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLive not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveComment(context.Context, *LiveCommentReq) (*LiveCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveComment not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveLike(context.Context, *LiveLikeReq) (*LiveLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveLike not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveDeleteComment(context.Context, *LiveDeleteCommentReq) (*LiveCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveDeleteComment not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveListByGorse(context.Context, *LiveListReq) (*LiveListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveListByGorse not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveList(context.Context, *LiveListReq) (*LiveListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveList not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveCommentList(context.Context, *LiveCommentListReq) (*LiveCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveCommentList not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) LiveInfo(context.Context, *LiveDetailReq) (*LiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveInfo not implemented")
}
func (UnimplementedLiveBusinessRpcServiceServer) mustEmbedUnimplementedLiveBusinessRpcServiceServer() {
}

// UnsafeLiveBusinessRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveBusinessRpcServiceServer will
// result in compilation errors.
type UnsafeLiveBusinessRpcServiceServer interface {
	mustEmbedUnimplementedLiveBusinessRpcServiceServer()
}

func RegisterLiveBusinessRpcServiceServer(s grpc.ServiceRegistrar, srv LiveBusinessRpcServiceServer) {
	s.RegisterService(&LiveBusinessRpcService_ServiceDesc, srv)
}

func _LiveBusinessRpcService_StartLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).StartLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_StartLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).StartLive(ctx, req.(*StartLiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_EndLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndLiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).EndLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_EndLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).EndLive(ctx, req.(*EndLiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveComment(ctx, req.(*LiveCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveLike(ctx, req.(*LiveLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveDeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveDeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveDeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveDeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveDeleteComment(ctx, req.(*LiveDeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveListByGorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveListByGorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveListByGorse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveListByGorse(ctx, req.(*LiveListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveList(ctx, req.(*LiveListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveCommentList(ctx, req.(*LiveCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveBusinessRpcService_LiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveBusinessRpcServiceServer).LiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveBusinessRpcService_LiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveBusinessRpcServiceServer).LiveInfo(ctx, req.(*LiveDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveBusinessRpcService_ServiceDesc is the grpc.ServiceDesc for LiveBusinessRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveBusinessRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "live.LiveBusinessRpcService",
	HandlerType: (*LiveBusinessRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartLive",
			Handler:    _LiveBusinessRpcService_StartLive_Handler,
		},
		{
			MethodName: "EndLive",
			Handler:    _LiveBusinessRpcService_EndLive_Handler,
		},
		{
			MethodName: "LiveComment",
			Handler:    _LiveBusinessRpcService_LiveComment_Handler,
		},
		{
			MethodName: "LiveLike",
			Handler:    _LiveBusinessRpcService_LiveLike_Handler,
		},
		{
			MethodName: "LiveDeleteComment",
			Handler:    _LiveBusinessRpcService_LiveDeleteComment_Handler,
		},
		{
			MethodName: "LiveListByGorse",
			Handler:    _LiveBusinessRpcService_LiveListByGorse_Handler,
		},
		{
			MethodName: "LiveList",
			Handler:    _LiveBusinessRpcService_LiveList_Handler,
		},
		{
			MethodName: "LiveCommentList",
			Handler:    _LiveBusinessRpcService_LiveCommentList_Handler,
		},
		{
			MethodName: "LiveInfo",
			Handler:    _LiveBusinessRpcService_LiveInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live.proto",
}

const (
	LiveCallbackRpcService_OnPublicStream_FullMethodName = "/live.LiveCallbackRpcService/OnPublicStream"
	LiveCallbackRpcService_OnStreamChange_FullMethodName = "/live.LiveCallbackRpcService/OnStreamChange"
)

// LiveCallbackRpcServiceClient is the client API for LiveCallbackRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveCallbackRpcServiceClient interface {
	OnPublicStream(ctx context.Context, in *OnPublicStreamReq, opts ...grpc.CallOption) (*OnPublicStreamResp, error)
	OnStreamChange(ctx context.Context, in *OnStreamChangeReq, opts ...grpc.CallOption) (*OnStreamChangeResp, error)
}

type liveCallbackRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveCallbackRpcServiceClient(cc grpc.ClientConnInterface) LiveCallbackRpcServiceClient {
	return &liveCallbackRpcServiceClient{cc}
}

func (c *liveCallbackRpcServiceClient) OnPublicStream(ctx context.Context, in *OnPublicStreamReq, opts ...grpc.CallOption) (*OnPublicStreamResp, error) {
	out := new(OnPublicStreamResp)
	err := c.cc.Invoke(ctx, LiveCallbackRpcService_OnPublicStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveCallbackRpcServiceClient) OnStreamChange(ctx context.Context, in *OnStreamChangeReq, opts ...grpc.CallOption) (*OnStreamChangeResp, error) {
	out := new(OnStreamChangeResp)
	err := c.cc.Invoke(ctx, LiveCallbackRpcService_OnStreamChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveCallbackRpcServiceServer is the server API for LiveCallbackRpcService service.
// All implementations must embed UnimplementedLiveCallbackRpcServiceServer
// for forward compatibility
type LiveCallbackRpcServiceServer interface {
	OnPublicStream(context.Context, *OnPublicStreamReq) (*OnPublicStreamResp, error)
	OnStreamChange(context.Context, *OnStreamChangeReq) (*OnStreamChangeResp, error)
	mustEmbedUnimplementedLiveCallbackRpcServiceServer()
}

// UnimplementedLiveCallbackRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveCallbackRpcServiceServer struct {
}

func (UnimplementedLiveCallbackRpcServiceServer) OnPublicStream(context.Context, *OnPublicStreamReq) (*OnPublicStreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPublicStream not implemented")
}
func (UnimplementedLiveCallbackRpcServiceServer) OnStreamChange(context.Context, *OnStreamChangeReq) (*OnStreamChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStreamChange not implemented")
}
func (UnimplementedLiveCallbackRpcServiceServer) mustEmbedUnimplementedLiveCallbackRpcServiceServer() {
}

// UnsafeLiveCallbackRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveCallbackRpcServiceServer will
// result in compilation errors.
type UnsafeLiveCallbackRpcServiceServer interface {
	mustEmbedUnimplementedLiveCallbackRpcServiceServer()
}

func RegisterLiveCallbackRpcServiceServer(s grpc.ServiceRegistrar, srv LiveCallbackRpcServiceServer) {
	s.RegisterService(&LiveCallbackRpcService_ServiceDesc, srv)
}

func _LiveCallbackRpcService_OnPublicStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnPublicStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCallbackRpcServiceServer).OnPublicStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveCallbackRpcService_OnPublicStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCallbackRpcServiceServer).OnPublicStream(ctx, req.(*OnPublicStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveCallbackRpcService_OnStreamChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnStreamChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCallbackRpcServiceServer).OnStreamChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveCallbackRpcService_OnStreamChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCallbackRpcServiceServer).OnStreamChange(ctx, req.(*OnStreamChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveCallbackRpcService_ServiceDesc is the grpc.ServiceDesc for LiveCallbackRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveCallbackRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "live.LiveCallbackRpcService",
	HandlerType: (*LiveCallbackRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnPublicStream",
			Handler:    _LiveCallbackRpcService_OnPublicStream_Handler,
		},
		{
			MethodName: "OnStreamChange",
			Handler:    _LiveCallbackRpcService_OnStreamChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live.proto",
}
