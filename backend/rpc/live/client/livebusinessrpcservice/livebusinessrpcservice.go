// Code generated by goctl. DO NOT EDIT.
// Source: live.proto

package livebusinessrpcservice

import (
	"context"

	"backend/rpc/live/live"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EndLiveReq           = live.EndLiveReq
	LiveComment          = live.LiveComment
	LiveCommentListReq   = live.LiveCommentListReq
	LiveCommentListResp  = live.LiveCommentListResp
	LiveCommentReq       = live.LiveCommentReq
	LiveCommentResp      = live.LiveCommentResp
	LiveDeleteCommentReq = live.LiveDeleteCommentReq
	LiveDetailReq        = live.LiveDetailReq
	LiveDetailResp       = live.LiveDetailResp
	LiveInfo             = live.LiveInfo
	LiveLikeReq          = live.LiveLikeReq
	LiveLikeResp         = live.LiveLikeResp
	LiveListReq          = live.LiveListReq
	LiveListResp         = live.LiveListResp
	OnPublicStreamReq    = live.OnPublicStreamReq
	OnPublicStreamResp   = live.OnPublicStreamResp
	OnStreamChangeReq    = live.OnStreamChangeReq
	OnStreamChangeResp   = live.OnStreamChangeResp
	StartLiveReq         = live.StartLiveReq
	User                 = live.User

	LiveBusinessRpcService interface {
		StartLive(ctx context.Context, in *StartLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error)
		EndLive(ctx context.Context, in *EndLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error)
		LiveComment(ctx context.Context, in *LiveCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error)
		LiveLike(ctx context.Context, in *LiveLikeReq, opts ...grpc.CallOption) (*LiveLikeResp, error)
		LiveDeleteComment(ctx context.Context, in *LiveDeleteCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error)
		LiveListByGorse(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error)
		LiveList(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error)
		LiveCommentList(ctx context.Context, in *LiveCommentListReq, opts ...grpc.CallOption) (*LiveCommentListResp, error)
		LiveInfo(ctx context.Context, in *LiveDetailReq, opts ...grpc.CallOption) (*LiveDetailResp, error)
	}

	defaultLiveBusinessRpcService struct {
		cli zrpc.Client
	}
)

func NewLiveBusinessRpcService(cli zrpc.Client) LiveBusinessRpcService {
	return &defaultLiveBusinessRpcService{
		cli: cli,
	}
}

func (m *defaultLiveBusinessRpcService) StartLive(ctx context.Context, in *StartLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.StartLive(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) EndLive(ctx context.Context, in *EndLiveReq, opts ...grpc.CallOption) (*LiveDetailResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.EndLive(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveComment(ctx context.Context, in *LiveCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveComment(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveLike(ctx context.Context, in *LiveLikeReq, opts ...grpc.CallOption) (*LiveLikeResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveLike(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveDeleteComment(ctx context.Context, in *LiveDeleteCommentReq, opts ...grpc.CallOption) (*LiveCommentResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveDeleteComment(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveListByGorse(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveListByGorse(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveList(ctx context.Context, in *LiveListReq, opts ...grpc.CallOption) (*LiveListResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveList(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveCommentList(ctx context.Context, in *LiveCommentListReq, opts ...grpc.CallOption) (*LiveCommentListResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveCommentList(ctx, in, opts...)
}

func (m *defaultLiveBusinessRpcService) LiveInfo(ctx context.Context, in *LiveDetailReq, opts ...grpc.CallOption) (*LiveDetailResp, error) {
	client := live.NewLiveBusinessRpcServiceClient(m.cli.Conn())
	return client.LiveInfo(ctx, in, opts...)
}
