// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserCommonRpcService_LoginWithUsername_FullMethodName = "/user.UserCommonRpcService/LoginWithUsername"
	UserCommonRpcService_LoginWithEmail_FullMethodName    = "/user.UserCommonRpcService/LoginWithEmail"
	UserCommonRpcService_LoginWithPhone_FullMethodName    = "/user.UserCommonRpcService/LoginWithPhone"
	UserCommonRpcService_Register_FullMethodName          = "/user.UserCommonRpcService/Register"
	UserCommonRpcService_UpdateUserInfo_FullMethodName    = "/user.UserCommonRpcService/UpdateUserInfo"
	UserCommonRpcService_Logout_FullMethodName            = "/user.UserCommonRpcService/Logout"
)

// UserCommonRpcServiceClient is the client API for UserCommonRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCommonRpcServiceClient interface {
	LoginWithUsername(ctx context.Context, in *LoginWithUsernameReq, opts ...grpc.CallOption) (*LoginResp, error)
	LoginWithEmail(ctx context.Context, in *LoginWithEmailReq, opts ...grpc.CallOption) (*LoginResp, error)
	LoginWithPhone(ctx context.Context, in *LoginWithPhoneReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
}

type userCommonRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCommonRpcServiceClient(cc grpc.ClientConnInterface) UserCommonRpcServiceClient {
	return &userCommonRpcServiceClient{cc}
}

func (c *userCommonRpcServiceClient) LoginWithUsername(ctx context.Context, in *LoginWithUsernameReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserCommonRpcService_LoginWithUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommonRpcServiceClient) LoginWithEmail(ctx context.Context, in *LoginWithEmailReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserCommonRpcService_LoginWithEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommonRpcServiceClient) LoginWithPhone(ctx context.Context, in *LoginWithPhoneReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserCommonRpcService_LoginWithPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommonRpcServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserCommonRpcService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommonRpcServiceClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, UserCommonRpcService_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommonRpcServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, UserCommonRpcService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCommonRpcServiceServer is the server API for UserCommonRpcService service.
// All implementations must embed UnimplementedUserCommonRpcServiceServer
// for forward compatibility
type UserCommonRpcServiceServer interface {
	LoginWithUsername(context.Context, *LoginWithUsernameReq) (*LoginResp, error)
	LoginWithEmail(context.Context, *LoginWithEmailReq) (*LoginResp, error)
	LoginWithPhone(context.Context, *LoginWithPhoneReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*LoginResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	mustEmbedUnimplementedUserCommonRpcServiceServer()
}

// UnimplementedUserCommonRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserCommonRpcServiceServer struct {
}

func (UnimplementedUserCommonRpcServiceServer) LoginWithUsername(context.Context, *LoginWithUsernameReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithUsername not implemented")
}
func (UnimplementedUserCommonRpcServiceServer) LoginWithEmail(context.Context, *LoginWithEmailReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithEmail not implemented")
}
func (UnimplementedUserCommonRpcServiceServer) LoginWithPhone(context.Context, *LoginWithPhoneReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithPhone not implemented")
}
func (UnimplementedUserCommonRpcServiceServer) Register(context.Context, *RegisterReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserCommonRpcServiceServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserCommonRpcServiceServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserCommonRpcServiceServer) mustEmbedUnimplementedUserCommonRpcServiceServer() {}

// UnsafeUserCommonRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCommonRpcServiceServer will
// result in compilation errors.
type UnsafeUserCommonRpcServiceServer interface {
	mustEmbedUnimplementedUserCommonRpcServiceServer()
}

func RegisterUserCommonRpcServiceServer(s grpc.ServiceRegistrar, srv UserCommonRpcServiceServer) {
	s.RegisterService(&UserCommonRpcService_ServiceDesc, srv)
}

func _UserCommonRpcService_LoginWithUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommonRpcServiceServer).LoginWithUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommonRpcService_LoginWithUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommonRpcServiceServer).LoginWithUsername(ctx, req.(*LoginWithUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommonRpcService_LoginWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommonRpcServiceServer).LoginWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommonRpcService_LoginWithEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommonRpcServiceServer).LoginWithEmail(ctx, req.(*LoginWithEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommonRpcService_LoginWithPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommonRpcServiceServer).LoginWithPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommonRpcService_LoginWithPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommonRpcServiceServer).LoginWithPhone(ctx, req.(*LoginWithPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommonRpcService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommonRpcServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommonRpcService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommonRpcServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommonRpcService_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommonRpcServiceServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommonRpcService_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommonRpcServiceServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCommonRpcService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommonRpcServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCommonRpcService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommonRpcServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCommonRpcService_ServiceDesc is the grpc.ServiceDesc for UserCommonRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCommonRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserCommonRpcService",
	HandlerType: (*UserCommonRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWithUsername",
			Handler:    _UserCommonRpcService_LoginWithUsername_Handler,
		},
		{
			MethodName: "LoginWithEmail",
			Handler:    _UserCommonRpcService_LoginWithEmail_Handler,
		},
		{
			MethodName: "LoginWithPhone",
			Handler:    _UserCommonRpcService_LoginWithPhone_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserCommonRpcService_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserCommonRpcService_UpdateUserInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserCommonRpcService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

const (
	UserFollowRpcService_FollowUser_FullMethodName    = "/user.UserFollowRpcService/FollowUser"
	UserFollowRpcService_FollowerList_FullMethodName  = "/user.UserFollowRpcService/FollowerList"
	UserFollowRpcService_FollowingList_FullMethodName = "/user.UserFollowRpcService/FollowingList"
	UserFollowRpcService_FriendList_FullMethodName    = "/user.UserFollowRpcService/FriendList"
)

// UserFollowRpcServiceClient is the client API for UserFollowRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFollowRpcServiceClient interface {
	FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error)
	FollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error)
	FollowingList(ctx context.Context, in *FollowingListReq, opts ...grpc.CallOption) (*FollowingListResp, error)
	FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
}

type userFollowRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFollowRpcServiceClient(cc grpc.ClientConnInterface) UserFollowRpcServiceClient {
	return &userFollowRpcServiceClient{cc}
}

func (c *userFollowRpcServiceClient) FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error) {
	out := new(FollowUserResp)
	err := c.cc.Invoke(ctx, UserFollowRpcService_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowRpcServiceClient) FollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error) {
	out := new(FollowerListResp)
	err := c.cc.Invoke(ctx, UserFollowRpcService_FollowerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowRpcServiceClient) FollowingList(ctx context.Context, in *FollowingListReq, opts ...grpc.CallOption) (*FollowingListResp, error) {
	out := new(FollowingListResp)
	err := c.cc.Invoke(ctx, UserFollowRpcService_FollowingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowRpcServiceClient) FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	out := new(FriendListResp)
	err := c.cc.Invoke(ctx, UserFollowRpcService_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFollowRpcServiceServer is the server API for UserFollowRpcService service.
// All implementations must embed UnimplementedUserFollowRpcServiceServer
// for forward compatibility
type UserFollowRpcServiceServer interface {
	FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error)
	FollowerList(context.Context, *FollowerListReq) (*FollowerListResp, error)
	FollowingList(context.Context, *FollowingListReq) (*FollowingListResp, error)
	FriendList(context.Context, *FriendListReq) (*FriendListResp, error)
	mustEmbedUnimplementedUserFollowRpcServiceServer()
}

// UnimplementedUserFollowRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserFollowRpcServiceServer struct {
}

func (UnimplementedUserFollowRpcServiceServer) FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedUserFollowRpcServiceServer) FollowerList(context.Context, *FollowerListReq) (*FollowerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerList not implemented")
}
func (UnimplementedUserFollowRpcServiceServer) FollowingList(context.Context, *FollowingListReq) (*FollowingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowingList not implemented")
}
func (UnimplementedUserFollowRpcServiceServer) FriendList(context.Context, *FriendListReq) (*FriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedUserFollowRpcServiceServer) mustEmbedUnimplementedUserFollowRpcServiceServer() {}

// UnsafeUserFollowRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFollowRpcServiceServer will
// result in compilation errors.
type UnsafeUserFollowRpcServiceServer interface {
	mustEmbedUnimplementedUserFollowRpcServiceServer()
}

func RegisterUserFollowRpcServiceServer(s grpc.ServiceRegistrar, srv UserFollowRpcServiceServer) {
	s.RegisterService(&UserFollowRpcService_ServiceDesc, srv)
}

func _UserFollowRpcService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowRpcServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowRpcService_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowRpcServiceServer).FollowUser(ctx, req.(*FollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowRpcService_FollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowRpcServiceServer).FollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowRpcService_FollowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowRpcServiceServer).FollowerList(ctx, req.(*FollowerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowRpcService_FollowingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowRpcServiceServer).FollowingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowRpcService_FollowingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowRpcServiceServer).FollowingList(ctx, req.(*FollowingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowRpcService_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowRpcServiceServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowRpcService_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowRpcServiceServer).FriendList(ctx, req.(*FriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFollowRpcService_ServiceDesc is the grpc.ServiceDesc for UserFollowRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFollowRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserFollowRpcService",
	HandlerType: (*UserFollowRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowUser",
			Handler:    _UserFollowRpcService_FollowUser_Handler,
		},
		{
			MethodName: "FollowerList",
			Handler:    _UserFollowRpcService_FollowerList_Handler,
		},
		{
			MethodName: "FollowingList",
			Handler:    _UserFollowRpcService_FollowingList_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _UserFollowRpcService_FriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

const (
	UserFileRpcService_UserUploadFile_FullMethodName = "/user.UserFileRpcService/UserUploadFile"
)

// UserFileRpcServiceClient is the client API for UserFileRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFileRpcServiceClient interface {
	UserUploadFile(ctx context.Context, in *UserUploadFileReq, opts ...grpc.CallOption) (*UserUploadFileResp, error)
}

type userFileRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFileRpcServiceClient(cc grpc.ClientConnInterface) UserFileRpcServiceClient {
	return &userFileRpcServiceClient{cc}
}

func (c *userFileRpcServiceClient) UserUploadFile(ctx context.Context, in *UserUploadFileReq, opts ...grpc.CallOption) (*UserUploadFileResp, error) {
	out := new(UserUploadFileResp)
	err := c.cc.Invoke(ctx, UserFileRpcService_UserUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFileRpcServiceServer is the server API for UserFileRpcService service.
// All implementations must embed UnimplementedUserFileRpcServiceServer
// for forward compatibility
type UserFileRpcServiceServer interface {
	UserUploadFile(context.Context, *UserUploadFileReq) (*UserUploadFileResp, error)
	mustEmbedUnimplementedUserFileRpcServiceServer()
}

// UnimplementedUserFileRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserFileRpcServiceServer struct {
}

func (UnimplementedUserFileRpcServiceServer) UserUploadFile(context.Context, *UserUploadFileReq) (*UserUploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadFile not implemented")
}
func (UnimplementedUserFileRpcServiceServer) mustEmbedUnimplementedUserFileRpcServiceServer() {}

// UnsafeUserFileRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFileRpcServiceServer will
// result in compilation errors.
type UnsafeUserFileRpcServiceServer interface {
	mustEmbedUnimplementedUserFileRpcServiceServer()
}

func RegisterUserFileRpcServiceServer(s grpc.ServiceRegistrar, srv UserFileRpcServiceServer) {
	s.RegisterService(&UserFileRpcService_ServiceDesc, srv)
}

func _UserFileRpcService_UserUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileRpcServiceServer).UserUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFileRpcService_UserUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileRpcServiceServer).UserUploadFile(ctx, req.(*UserUploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFileRpcService_ServiceDesc is the grpc.ServiceDesc for UserFileRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFileRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserFileRpcService",
	HandlerType: (*UserFileRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserUploadFile",
			Handler:    _UserFileRpcService_UserUploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
