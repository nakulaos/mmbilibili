// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userfilerpcservice

import (
	"context"

	"backend/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FollowUserReq        = user.FollowUserReq
	FollowUserResp       = user.FollowUserResp
	FollowerListReq      = user.FollowerListReq
	FollowerListResp     = user.FollowerListResp
	FollowingListReq     = user.FollowingListReq
	FollowingListResp    = user.FollowingListResp
	FriendListReq        = user.FriendListReq
	FriendListResp       = user.FriendListResp
	Info                 = user.Info
	LoginResp            = user.LoginResp
	LoginWithEmailReq    = user.LoginWithEmailReq
	LoginWithPhoneReq    = user.LoginWithPhoneReq
	LoginWithUsernameReq = user.LoginWithUsernameReq
	LogoutReq            = user.LogoutReq
	LogoutResp           = user.LogoutResp
	RegisterReq          = user.RegisterReq
	UpdateUserInfoReq    = user.UpdateUserInfoReq
	UpdateUserInfoResp   = user.UpdateUserInfoResp
	User                 = user.User
	UserUploadFileReq    = user.UserUploadFileReq
	UserUploadFileResp   = user.UserUploadFileResp

	UserFileRpcService interface {
		UserUploadFile(ctx context.Context, in *UserUploadFileReq, opts ...grpc.CallOption) (*UserUploadFileResp, error)
	}

	defaultUserFileRpcService struct {
		cli zrpc.Client
	}
)

func NewUserFileRpcService(cli zrpc.Client) UserFileRpcService {
	return &defaultUserFileRpcService{
		cli: cli,
	}
}

func (m *defaultUserFileRpcService) UserUploadFile(ctx context.Context, in *UserUploadFileReq, opts ...grpc.CallOption) (*UserUploadFileResp, error) {
	client := user.NewUserFileRpcServiceClient(m.cli.Conn())
	return client.UserUploadFile(ctx, in, opts...)
}
