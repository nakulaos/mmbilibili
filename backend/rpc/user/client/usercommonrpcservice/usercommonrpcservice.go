// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package usercommonrpcservice

import (
	"context"

	"backend/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FollowUserReq        = user.FollowUserReq
	FollowUserResp       = user.FollowUserResp
	FollowerListReq      = user.FollowerListReq
	FollowerListResp     = user.FollowerListResp
	FollowingListReq     = user.FollowingListReq
	FollowingListResp    = user.FollowingListResp
	FriendListReq        = user.FriendListReq
	FriendListResp       = user.FriendListResp
	Info                 = user.Info
	LoginResp            = user.LoginResp
	LoginWithEmailReq    = user.LoginWithEmailReq
	LoginWithPhoneReq    = user.LoginWithPhoneReq
	LoginWithUsernameReq = user.LoginWithUsernameReq
	LogoutReq            = user.LogoutReq
	LogoutResp           = user.LogoutResp
	RegisterReq          = user.RegisterReq
	UpdateUserInfoReq    = user.UpdateUserInfoReq
	UpdateUserInfoResp   = user.UpdateUserInfoResp
	User                 = user.User
	UserUploadFileReq    = user.UserUploadFileReq
	UserUploadFileResp   = user.UserUploadFileResp

	UserCommonRpcService interface {
		LoginWithUsername(ctx context.Context, in *LoginWithUsernameReq, opts ...grpc.CallOption) (*LoginResp, error)
		LoginWithEmail(ctx context.Context, in *LoginWithEmailReq, opts ...grpc.CallOption) (*LoginResp, error)
		LoginWithPhone(ctx context.Context, in *LoginWithPhoneReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	}

	defaultUserCommonRpcService struct {
		cli zrpc.Client
	}
)

func NewUserCommonRpcService(cli zrpc.Client) UserCommonRpcService {
	return &defaultUserCommonRpcService{
		cli: cli,
	}
}

func (m *defaultUserCommonRpcService) LoginWithUsername(ctx context.Context, in *LoginWithUsernameReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserCommonRpcServiceClient(m.cli.Conn())
	return client.LoginWithUsername(ctx, in, opts...)
}

func (m *defaultUserCommonRpcService) LoginWithEmail(ctx context.Context, in *LoginWithEmailReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserCommonRpcServiceClient(m.cli.Conn())
	return client.LoginWithEmail(ctx, in, opts...)
}

func (m *defaultUserCommonRpcService) LoginWithPhone(ctx context.Context, in *LoginWithPhoneReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserCommonRpcServiceClient(m.cli.Conn())
	return client.LoginWithPhone(ctx, in, opts...)
}

func (m *defaultUserCommonRpcService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserCommonRpcServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserCommonRpcService) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	client := user.NewUserCommonRpcServiceClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

func (m *defaultUserCommonRpcService) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := user.NewUserCommonRpcServiceClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}
