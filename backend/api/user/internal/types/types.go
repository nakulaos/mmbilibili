// Code generated by goctl. DO NOT EDIT.
package types

type FollowUserReq struct {
	UserID uint `json:"user_id" validate:"required"`
	Action int  `json:"action" validate:"required,min=1,max=2"`
}

type FollowerListReq struct {
	Page     int `json:"page,optional" validate:"omitempty,min=1"`
	PageSize int `json:"page_size,optional" validate:"omitempty,min=1,max=100"`
	Total    int `json:"total,optional" validate:"omitempty"`
}

type FollowerListResp struct {
	Total int    `json:"total"`
	List  []User `json:"list"`
}

type FollowingListReq struct {
	Page     int `json:"page,optional" validate:"omitempty,min=1"`
	PageSize int `json:"page_size,optional" validate:"omitempty,min=1,max=100"`
	Total    int `json:"total,optional" validate:"omitempty"`
}

type FollowingListResp struct {
	Total int    `json:"total"`
	List  []User `json:"list"`
}

type FriendListReq struct {
	Page     int `json:"page,optional" validate:"omitempty,min=1"`
	PageSize int `json:"page_size,optional" validate:"omitempty,min=1,max=100"`
	Total    int `json:"total,optional" validate:"omitempty"`
}

type FriendListResp struct {
	Total int    `json:"total"`
	List  []User `json:"list"`
}

type LoginResp struct {
	AccessToken string `json:"accessToken"`
	UserID      int64  `json:"user_id"`
	UserInfo    User   `json:"userinfo"`
}

type LoginWithEmailReq struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required"`
}

type LoginWithPhoneReq struct {
	Phone    string `json:"phone" validate:"required,phone"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required"`
}

type LoginWithUsernameReq struct {
	Username string `json:"username" validate:"min_len=3,max_len=12,required,alphanum"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required"`
}

type LogoutReq struct {
}

type RegisterReq struct {
	Username string `json:"username" validate:"min_len=3,max_len=12,required,alphanum"`
	Password string `json:"password" validate:"min_len=8,max_len=20,password,required"`
}

type UpdateUserInfoReq struct {
	Nickname string `json:"nickname,optional" validate:"min_len=1,max_len=12"`
	Avatar   string `json:"avatar,optional" validate:"url"`
	Gender   uint32 `json:"gender,optional" validate:"min=0,max=2"`
	Role     uint32 `json:"role,optional" validate:"min=0,max=2"`
	Phone    string `json:"phone,optional" validate:"telephone"`
	Email    string `json:"email,optional" validate:"email"`
}

type UpdateUserInfoResp struct {
	UserInfo User `json:"userinfo"`
}

type User struct {
	Id             uint32 `json:"id"`
	Username       string `json:"username"`
	Nickname       string `json:"nickname"`
	Avatar         string `json:"avatar"`
	Gender         uint32 `json:"gender"`
	Role           uint32 `json:"role"`
	FollowerCount  int    `json:"follower_count"`
	FollowingCount int    `json:"following_count"`
	LikeCount      int    `json:"like_count"`
	StarCount      int    `json:"star_count"`
	SelfStarCount  int    `json:"self_star_count"`
	SelfLikeCount  int    `json:"self_like_count"`
	LiveCount      int    `json:"live_count"`
	WorkCount      int    `json:"work_count"`
	FriendCount    int    `json:"friend_count"`
	Phone          string `json:"phone"`
	Email          string `json:"email"`
	Status         uint   `json:"status"`
}

type UserUploadFileReq struct {
	Kind string `form:"kind" validate:"required,oneof=avatar cover video"`
}

type UserUploadFileResp struct {
	FileURL  string `json:"url"`
	CoverURL string `json:"cover_url"`
}
