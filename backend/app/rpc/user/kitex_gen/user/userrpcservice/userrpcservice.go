// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userrpcservice

import (
	user "backend/app/rpc/user/kitex_gen/user"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"LoginWithUsername": kitex.NewMethodInfo(
		loginWithUsernameHandler,
		newLoginWithUsernameArgs,
		newLoginWithUsernameResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"LoginWithEmail": kitex.NewMethodInfo(
		loginWithEmailHandler,
		newLoginWithEmailArgs,
		newLoginWithEmailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"LoginWithPhone": kitex.NewMethodInfo(
		loginWithPhoneHandler,
		newLoginWithPhoneArgs,
		newLoginWithPhoneResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newRegisterArgs,
		newRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Logout": kitex.NewMethodInfo(
		logoutHandler,
		newLogoutArgs,
		newLogoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FollowUser": kitex.NewMethodInfo(
		followUserHandler,
		newFollowUserArgs,
		newFollowUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FollowerList": kitex.NewMethodInfo(
		followerListHandler,
		newFollowerListArgs,
		newFollowerListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FollowingList": kitex.NewMethodInfo(
		followingListHandler,
		newFollowingListArgs,
		newFollowingListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FriendList": kitex.NewMethodInfo(
		friendListHandler,
		newFriendListArgs,
		newFriendListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserUploadFile": kitex.NewMethodInfo(
		userUploadFileHandler,
		newUserUploadFileArgs,
		newUserUploadFileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RefreshToken": kitex.NewMethodInfo(
		refreshTokenHandler,
		newRefreshTokenArgs,
		newRefreshTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userRpcServiceServiceInfo                = NewServiceInfo()
	userRpcServiceServiceInfoForClient       = NewServiceInfoForClient()
	userRpcServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userRpcServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userRpcServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userRpcServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserRpcService"
	handlerType := (*user.UserRpcService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func loginWithUsernameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginWithUsernameReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).LoginWithUsername(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginWithUsernameArgs:
		success, err := handler.(user.UserRpcService).LoginWithUsername(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginWithUsernameResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginWithUsernameArgs() interface{} {
	return &LoginWithUsernameArgs{}
}

func newLoginWithUsernameResult() interface{} {
	return &LoginWithUsernameResult{}
}

type LoginWithUsernameArgs struct {
	Req *user.LoginWithUsernameReq
}

func (p *LoginWithUsernameArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginWithUsernameReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginWithUsernameArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginWithUsernameArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginWithUsernameArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginWithUsernameArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginWithUsernameReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginWithUsernameArgs_Req_DEFAULT *user.LoginWithUsernameReq

func (p *LoginWithUsernameArgs) GetReq() *user.LoginWithUsernameReq {
	if !p.IsSetReq() {
		return LoginWithUsernameArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginWithUsernameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginWithUsernameArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginWithUsernameResult struct {
	Success *user.LoginResp
}

var LoginWithUsernameResult_Success_DEFAULT *user.LoginResp

func (p *LoginWithUsernameResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginWithUsernameResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginWithUsernameResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginWithUsernameResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginWithUsernameResult) Unmarshal(in []byte) error {
	msg := new(user.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginWithUsernameResult) GetSuccess() *user.LoginResp {
	if !p.IsSetSuccess() {
		return LoginWithUsernameResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginWithUsernameResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginResp)
}

func (p *LoginWithUsernameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithUsernameResult) GetResult() interface{} {
	return p.Success
}

func loginWithEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginWithEmailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).LoginWithEmail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginWithEmailArgs:
		success, err := handler.(user.UserRpcService).LoginWithEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginWithEmailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginWithEmailArgs() interface{} {
	return &LoginWithEmailArgs{}
}

func newLoginWithEmailResult() interface{} {
	return &LoginWithEmailResult{}
}

type LoginWithEmailArgs struct {
	Req *user.LoginWithEmailReq
}

func (p *LoginWithEmailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginWithEmailReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginWithEmailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginWithEmailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginWithEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginWithEmailArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginWithEmailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginWithEmailArgs_Req_DEFAULT *user.LoginWithEmailReq

func (p *LoginWithEmailArgs) GetReq() *user.LoginWithEmailReq {
	if !p.IsSetReq() {
		return LoginWithEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginWithEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginWithEmailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginWithEmailResult struct {
	Success *user.LoginResp
}

var LoginWithEmailResult_Success_DEFAULT *user.LoginResp

func (p *LoginWithEmailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginWithEmailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginWithEmailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginWithEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginWithEmailResult) Unmarshal(in []byte) error {
	msg := new(user.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginWithEmailResult) GetSuccess() *user.LoginResp {
	if !p.IsSetSuccess() {
		return LoginWithEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginWithEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginResp)
}

func (p *LoginWithEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithEmailResult) GetResult() interface{} {
	return p.Success
}

func loginWithPhoneHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginWithPhoneReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).LoginWithPhone(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginWithPhoneArgs:
		success, err := handler.(user.UserRpcService).LoginWithPhone(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginWithPhoneResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginWithPhoneArgs() interface{} {
	return &LoginWithPhoneArgs{}
}

func newLoginWithPhoneResult() interface{} {
	return &LoginWithPhoneResult{}
}

type LoginWithPhoneArgs struct {
	Req *user.LoginWithPhoneReq
}

func (p *LoginWithPhoneArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginWithPhoneReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginWithPhoneArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginWithPhoneArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginWithPhoneArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginWithPhoneArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginWithPhoneReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginWithPhoneArgs_Req_DEFAULT *user.LoginWithPhoneReq

func (p *LoginWithPhoneArgs) GetReq() *user.LoginWithPhoneReq {
	if !p.IsSetReq() {
		return LoginWithPhoneArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginWithPhoneArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginWithPhoneArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginWithPhoneResult struct {
	Success *user.LoginResp
}

var LoginWithPhoneResult_Success_DEFAULT *user.LoginResp

func (p *LoginWithPhoneResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginWithPhoneResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginWithPhoneResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginWithPhoneResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginWithPhoneResult) Unmarshal(in []byte) error {
	msg := new(user.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginWithPhoneResult) GetSuccess() *user.LoginResp {
	if !p.IsSetSuccess() {
		return LoginWithPhoneResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginWithPhoneResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginResp)
}

func (p *LoginWithPhoneResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginWithPhoneResult) GetResult() interface{} {
	return p.Success
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RegisterReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).Register(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RegisterArgs:
		success, err := handler.(user.UserRpcService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *user.RegisterReq
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.RegisterReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(user.RegisterReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *user.RegisterReq

func (p *RegisterArgs) GetReq() *user.RegisterReq {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *user.LoginResp
}

var RegisterResult_Success_DEFAULT *user.LoginResp

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(user.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *user.LoginResp {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginResp)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(user.UserRpcService).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *user.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *user.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *user.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *user.UpdateUserInfoResp
}

var UpdateUserInfoResult_Success_DEFAULT *user.UpdateUserInfoResp

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UpdateUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *user.UpdateUserInfoResp {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UpdateUserInfoResp)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func logoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LogoutReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).Logout(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LogoutArgs:
		success, err := handler.(user.UserRpcService).Logout(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LogoutResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLogoutArgs() interface{} {
	return &LogoutArgs{}
}

func newLogoutResult() interface{} {
	return &LogoutResult{}
}

type LogoutArgs struct {
	Req *user.LogoutReq
}

func (p *LogoutArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LogoutReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LogoutArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LogoutArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LogoutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LogoutArgs) Unmarshal(in []byte) error {
	msg := new(user.LogoutReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LogoutArgs_Req_DEFAULT *user.LogoutReq

func (p *LogoutArgs) GetReq() *user.LogoutReq {
	if !p.IsSetReq() {
		return LogoutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LogoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LogoutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LogoutResult struct {
	Success *user.LogoutResp
}

var LogoutResult_Success_DEFAULT *user.LogoutResp

func (p *LogoutResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LogoutResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LogoutResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LogoutResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LogoutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LogoutResult) Unmarshal(in []byte) error {
	msg := new(user.LogoutResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LogoutResult) GetSuccess() *user.LogoutResp {
	if !p.IsSetSuccess() {
		return LogoutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LogoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LogoutResp)
}

func (p *LogoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LogoutResult) GetResult() interface{} {
	return p.Success
}

func followUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.FollowUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).FollowUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FollowUserArgs:
		success, err := handler.(user.UserRpcService).FollowUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFollowUserArgs() interface{} {
	return &FollowUserArgs{}
}

func newFollowUserResult() interface{} {
	return &FollowUserResult{}
}

type FollowUserArgs struct {
	Req *user.FollowUserReq
}

func (p *FollowUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.FollowUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowUserArgs) Unmarshal(in []byte) error {
	msg := new(user.FollowUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowUserArgs_Req_DEFAULT *user.FollowUserReq

func (p *FollowUserArgs) GetReq() *user.FollowUserReq {
	if !p.IsSetReq() {
		return FollowUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowUserResult struct {
	Success *user.FollowUserResp
}

var FollowUserResult_Success_DEFAULT *user.FollowUserResp

func (p *FollowUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.FollowUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowUserResult) Unmarshal(in []byte) error {
	msg := new(user.FollowUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowUserResult) GetSuccess() *user.FollowUserResp {
	if !p.IsSetSuccess() {
		return FollowUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.FollowUserResp)
}

func (p *FollowUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowUserResult) GetResult() interface{} {
	return p.Success
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.FollowerListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).FollowerList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FollowerListArgs:
		success, err := handler.(user.UserRpcService).FollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowerListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFollowerListArgs() interface{} {
	return &FollowerListArgs{}
}

func newFollowerListResult() interface{} {
	return &FollowerListResult{}
}

type FollowerListArgs struct {
	Req *user.FollowerListReq
}

func (p *FollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.FollowerListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowerListArgs) Unmarshal(in []byte) error {
	msg := new(user.FollowerListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowerListArgs_Req_DEFAULT *user.FollowerListReq

func (p *FollowerListArgs) GetReq() *user.FollowerListReq {
	if !p.IsSetReq() {
		return FollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowerListResult struct {
	Success *user.FollowerListResp
}

var FollowerListResult_Success_DEFAULT *user.FollowerListResp

func (p *FollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.FollowerListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowerListResult) Unmarshal(in []byte) error {
	msg := new(user.FollowerListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowerListResult) GetSuccess() *user.FollowerListResp {
	if !p.IsSetSuccess() {
		return FollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.FollowerListResp)
}

func (p *FollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowerListResult) GetResult() interface{} {
	return p.Success
}

func followingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.FollowingListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).FollowingList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FollowingListArgs:
		success, err := handler.(user.UserRpcService).FollowingList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowingListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFollowingListArgs() interface{} {
	return &FollowingListArgs{}
}

func newFollowingListResult() interface{} {
	return &FollowingListResult{}
}

type FollowingListArgs struct {
	Req *user.FollowingListReq
}

func (p *FollowingListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.FollowingListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowingListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowingListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowingListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowingListArgs) Unmarshal(in []byte) error {
	msg := new(user.FollowingListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowingListArgs_Req_DEFAULT *user.FollowingListReq

func (p *FollowingListArgs) GetReq() *user.FollowingListReq {
	if !p.IsSetReq() {
		return FollowingListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowingListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowingListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowingListResult struct {
	Success *user.FollowingListResp
}

var FollowingListResult_Success_DEFAULT *user.FollowingListResp

func (p *FollowingListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.FollowingListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowingListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowingListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowingListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowingListResult) Unmarshal(in []byte) error {
	msg := new(user.FollowingListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowingListResult) GetSuccess() *user.FollowingListResp {
	if !p.IsSetSuccess() {
		return FollowingListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowingListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.FollowingListResp)
}

func (p *FollowingListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowingListResult) GetResult() interface{} {
	return p.Success
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.FriendListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).FriendList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FriendListArgs:
		success, err := handler.(user.UserRpcService).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *user.FriendListReq
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.FriendListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	msg := new(user.FriendListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *user.FriendListReq

func (p *FriendListArgs) GetReq() *user.FriendListReq {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FriendListResult struct {
	Success *user.FriendListResp
}

var FriendListResult_Success_DEFAULT *user.FriendListResp

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.FriendListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	msg := new(user.FriendListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *user.FriendListResp {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.FriendListResp)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FriendListResult) GetResult() interface{} {
	return p.Success
}

func userUploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserUploadFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).UserUploadFile(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserUploadFileArgs:
		success, err := handler.(user.UserRpcService).UserUploadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserUploadFileResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserUploadFileArgs() interface{} {
	return &UserUploadFileArgs{}
}

func newUserUploadFileResult() interface{} {
	return &UserUploadFileResult{}
}

type UserUploadFileArgs struct {
	Req *user.UserUploadFileReq
}

func (p *UserUploadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserUploadFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserUploadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserUploadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserUploadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserUploadFileArgs) Unmarshal(in []byte) error {
	msg := new(user.UserUploadFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserUploadFileArgs_Req_DEFAULT *user.UserUploadFileReq

func (p *UserUploadFileArgs) GetReq() *user.UserUploadFileReq {
	if !p.IsSetReq() {
		return UserUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserUploadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserUploadFileResult struct {
	Success *user.UserUploadFileResp
}

var UserUploadFileResult_Success_DEFAULT *user.UserUploadFileResp

func (p *UserUploadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserUploadFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserUploadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserUploadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserUploadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserUploadFileResult) Unmarshal(in []byte) error {
	msg := new(user.UserUploadFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserUploadFileResult) GetSuccess() *user.UserUploadFileResp {
	if !p.IsSetSuccess() {
		return UserUploadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserUploadFileResp)
}

func (p *UserUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserUploadFileResult) GetResult() interface{} {
	return p.Success
}

func refreshTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RefreshTokenReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserRpcService).RefreshToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RefreshTokenArgs:
		success, err := handler.(user.UserRpcService).RefreshToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RefreshTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRefreshTokenArgs() interface{} {
	return &RefreshTokenArgs{}
}

func newRefreshTokenResult() interface{} {
	return &RefreshTokenResult{}
}

type RefreshTokenArgs struct {
	Req *user.RefreshTokenReq
}

func (p *RefreshTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.RefreshTokenReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RefreshTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RefreshTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RefreshTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RefreshTokenArgs) Unmarshal(in []byte) error {
	msg := new(user.RefreshTokenReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RefreshTokenArgs_Req_DEFAULT *user.RefreshTokenReq

func (p *RefreshTokenArgs) GetReq() *user.RefreshTokenReq {
	if !p.IsSetReq() {
		return RefreshTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RefreshTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RefreshTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RefreshTokenResult struct {
	Success *user.RefreshTokenResp
}

var RefreshTokenResult_Success_DEFAULT *user.RefreshTokenResp

func (p *RefreshTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.RefreshTokenResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RefreshTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RefreshTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RefreshTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RefreshTokenResult) Unmarshal(in []byte) error {
	msg := new(user.RefreshTokenResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RefreshTokenResult) GetSuccess() *user.RefreshTokenResp {
	if !p.IsSetSuccess() {
		return RefreshTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RefreshTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.RefreshTokenResp)
}

func (p *RefreshTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RefreshTokenResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LoginWithUsername(ctx context.Context, Req *user.LoginWithUsernameReq) (r *user.LoginResp, err error) {
	var _args LoginWithUsernameArgs
	_args.Req = Req
	var _result LoginWithUsernameResult
	if err = p.c.Call(ctx, "LoginWithUsername", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginWithEmail(ctx context.Context, Req *user.LoginWithEmailReq) (r *user.LoginResp, err error) {
	var _args LoginWithEmailArgs
	_args.Req = Req
	var _result LoginWithEmailResult
	if err = p.c.Call(ctx, "LoginWithEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginWithPhone(ctx context.Context, Req *user.LoginWithPhoneReq) (r *user.LoginResp, err error) {
	var _args LoginWithPhoneArgs
	_args.Req = Req
	var _result LoginWithPhoneResult
	if err = p.c.Call(ctx, "LoginWithPhone", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, Req *user.RegisterReq) (r *user.LoginResp, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *user.UpdateUserInfoReq) (r *user.UpdateUserInfoResp, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Logout(ctx context.Context, Req *user.LogoutReq) (r *user.LogoutResp, err error) {
	var _args LogoutArgs
	_args.Req = Req
	var _result LogoutResult
	if err = p.c.Call(ctx, "Logout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowUser(ctx context.Context, Req *user.FollowUserReq) (r *user.FollowUserResp, err error) {
	var _args FollowUserArgs
	_args.Req = Req
	var _result FollowUserResult
	if err = p.c.Call(ctx, "FollowUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, Req *user.FollowerListReq) (r *user.FollowerListResp, err error) {
	var _args FollowerListArgs
	_args.Req = Req
	var _result FollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowingList(ctx context.Context, Req *user.FollowingListReq) (r *user.FollowingListResp, err error) {
	var _args FollowingListArgs
	_args.Req = Req
	var _result FollowingListResult
	if err = p.c.Call(ctx, "FollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, Req *user.FriendListReq) (r *user.FriendListResp, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserUploadFile(ctx context.Context, Req *user.UserUploadFileReq) (r *user.UserUploadFileResp, err error) {
	var _args UserUploadFileArgs
	_args.Req = Req
	var _result UserUploadFileResult
	if err = p.c.Call(ctx, "UserUploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RefreshToken(ctx context.Context, Req *user.RefreshTokenReq) (r *user.RefreshTokenResp, err error) {
	var _args RefreshTokenArgs
	_args.Req = Req
	var _result RefreshTokenResult
	if err = p.c.Call(ctx, "RefreshToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
