// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/dao/model"
)

func newDanmu(db *gorm.DB, opts ...gen.DOOption) danmu {
	_danmu := danmu{}

	_danmu.danmuDo.UseDB(db, opts...)
	_danmu.danmuDo.UseModel(&model.Danmu{})

	tableName := _danmu.danmuDo.TableName()
	_danmu.ALL = field.NewAsterisk(tableName)
	_danmu.ID = field.NewUint(tableName, "id")
	_danmu.CreatedAt = field.NewTime(tableName, "created_at")
	_danmu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_danmu.DeletedAt = field.NewField(tableName, "deleted_at")
	_danmu.UID = field.NewUint(tableName, "uid")
	_danmu.OwnerID = field.NewUint(tableName, "owner_id")
	_danmu.OwnerType = field.NewString(tableName, "owner_type")
	_danmu.Content = field.NewString(tableName, "content")
	_danmu.SendTime = field.NewFloat64(tableName, "send_time")
	_danmu.Type = field.NewInt(tableName, "type")
	_danmu.LikeCount = field.NewInt(tableName, "like_count")
	_danmu.UnLikeCount = field.NewInt(tableName, "un_like_count")

	_danmu.fillFieldMap()

	return _danmu
}

type danmu struct {
	danmuDo danmuDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	UID         field.Uint
	OwnerID     field.Uint
	OwnerType   field.String
	Content     field.String
	SendTime    field.Float64
	Type        field.Int
	LikeCount   field.Int
	UnLikeCount field.Int

	fieldMap map[string]field.Expr
}

func (d danmu) Table(newTableName string) *danmu {
	d.danmuDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d danmu) As(alias string) *danmu {
	d.danmuDo.DO = *(d.danmuDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *danmu) updateTableName(table string) *danmu {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.UID = field.NewUint(table, "uid")
	d.OwnerID = field.NewUint(table, "owner_id")
	d.OwnerType = field.NewString(table, "owner_type")
	d.Content = field.NewString(table, "content")
	d.SendTime = field.NewFloat64(table, "send_time")
	d.Type = field.NewInt(table, "type")
	d.LikeCount = field.NewInt(table, "like_count")
	d.UnLikeCount = field.NewInt(table, "un_like_count")

	d.fillFieldMap()

	return d
}

func (d *danmu) WithContext(ctx context.Context) IDanmuDo { return d.danmuDo.WithContext(ctx) }

func (d danmu) TableName() string { return d.danmuDo.TableName() }

func (d danmu) Alias() string { return d.danmuDo.Alias() }

func (d danmu) Columns(cols ...field.Expr) gen.Columns { return d.danmuDo.Columns(cols...) }

func (d *danmu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *danmu) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["uid"] = d.UID
	d.fieldMap["owner_id"] = d.OwnerID
	d.fieldMap["owner_type"] = d.OwnerType
	d.fieldMap["content"] = d.Content
	d.fieldMap["send_time"] = d.SendTime
	d.fieldMap["type"] = d.Type
	d.fieldMap["like_count"] = d.LikeCount
	d.fieldMap["un_like_count"] = d.UnLikeCount
}

func (d danmu) clone(db *gorm.DB) danmu {
	d.danmuDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d danmu) replaceDB(db *gorm.DB) danmu {
	d.danmuDo.ReplaceDB(db)
	return d
}

type danmuDo struct{ gen.DO }

type IDanmuDo interface {
	gen.SubQuery
	Debug() IDanmuDo
	WithContext(ctx context.Context) IDanmuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDanmuDo
	WriteDB() IDanmuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDanmuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDanmuDo
	Not(conds ...gen.Condition) IDanmuDo
	Or(conds ...gen.Condition) IDanmuDo
	Select(conds ...field.Expr) IDanmuDo
	Where(conds ...gen.Condition) IDanmuDo
	Order(conds ...field.Expr) IDanmuDo
	Distinct(cols ...field.Expr) IDanmuDo
	Omit(cols ...field.Expr) IDanmuDo
	Join(table schema.Tabler, on ...field.Expr) IDanmuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDanmuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDanmuDo
	Group(cols ...field.Expr) IDanmuDo
	Having(conds ...gen.Condition) IDanmuDo
	Limit(limit int) IDanmuDo
	Offset(offset int) IDanmuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDanmuDo
	Unscoped() IDanmuDo
	Create(values ...*model.Danmu) error
	CreateInBatches(values []*model.Danmu, batchSize int) error
	Save(values ...*model.Danmu) error
	First() (*model.Danmu, error)
	Take() (*model.Danmu, error)
	Last() (*model.Danmu, error)
	Find() ([]*model.Danmu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Danmu, err error)
	FindInBatches(result *[]*model.Danmu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Danmu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDanmuDo
	Assign(attrs ...field.AssignExpr) IDanmuDo
	Joins(fields ...field.RelationField) IDanmuDo
	Preload(fields ...field.RelationField) IDanmuDo
	FirstOrInit() (*model.Danmu, error)
	FirstOrCreate() (*model.Danmu, error)
	FindByPage(offset int, limit int) (result []*model.Danmu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDanmuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d danmuDo) Debug() IDanmuDo {
	return d.withDO(d.DO.Debug())
}

func (d danmuDo) WithContext(ctx context.Context) IDanmuDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d danmuDo) ReadDB() IDanmuDo {
	return d.Clauses(dbresolver.Read)
}

func (d danmuDo) WriteDB() IDanmuDo {
	return d.Clauses(dbresolver.Write)
}

func (d danmuDo) Session(config *gorm.Session) IDanmuDo {
	return d.withDO(d.DO.Session(config))
}

func (d danmuDo) Clauses(conds ...clause.Expression) IDanmuDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d danmuDo) Returning(value interface{}, columns ...string) IDanmuDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d danmuDo) Not(conds ...gen.Condition) IDanmuDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d danmuDo) Or(conds ...gen.Condition) IDanmuDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d danmuDo) Select(conds ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d danmuDo) Where(conds ...gen.Condition) IDanmuDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d danmuDo) Order(conds ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d danmuDo) Distinct(cols ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d danmuDo) Omit(cols ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d danmuDo) Join(table schema.Tabler, on ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d danmuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d danmuDo) RightJoin(table schema.Tabler, on ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d danmuDo) Group(cols ...field.Expr) IDanmuDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d danmuDo) Having(conds ...gen.Condition) IDanmuDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d danmuDo) Limit(limit int) IDanmuDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d danmuDo) Offset(offset int) IDanmuDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d danmuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDanmuDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d danmuDo) Unscoped() IDanmuDo {
	return d.withDO(d.DO.Unscoped())
}

func (d danmuDo) Create(values ...*model.Danmu) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d danmuDo) CreateInBatches(values []*model.Danmu, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d danmuDo) Save(values ...*model.Danmu) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d danmuDo) First() (*model.Danmu, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Danmu), nil
	}
}

func (d danmuDo) Take() (*model.Danmu, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Danmu), nil
	}
}

func (d danmuDo) Last() (*model.Danmu, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Danmu), nil
	}
}

func (d danmuDo) Find() ([]*model.Danmu, error) {
	result, err := d.DO.Find()
	return result.([]*model.Danmu), err
}

func (d danmuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Danmu, err error) {
	buf := make([]*model.Danmu, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d danmuDo) FindInBatches(result *[]*model.Danmu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d danmuDo) Attrs(attrs ...field.AssignExpr) IDanmuDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d danmuDo) Assign(attrs ...field.AssignExpr) IDanmuDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d danmuDo) Joins(fields ...field.RelationField) IDanmuDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d danmuDo) Preload(fields ...field.RelationField) IDanmuDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d danmuDo) FirstOrInit() (*model.Danmu, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Danmu), nil
	}
}

func (d danmuDo) FirstOrCreate() (*model.Danmu, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Danmu), nil
	}
}

func (d danmuDo) FindByPage(offset int, limit int) (result []*model.Danmu, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d danmuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d danmuDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d danmuDo) Delete(models ...*model.Danmu) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *danmuDo) withDO(do gen.Dao) *danmuDo {
	d.DO = *do.(*gen.DO)
	return d
}
