// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	Article  *article
	Category *category
	Comment  *comment
	Danmu    *danmu
	History  *history
	Live     *live
	Tag      *tag
	User     *user
	Video    *video
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Article = &Q.Article
	Category = &Q.Category
	Comment = &Q.Comment
	Danmu = &Q.Danmu
	History = &Q.History
	Live = &Q.Live
	Tag = &Q.Tag
	User = &Q.User
	Video = &Q.Video
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		Article:  newArticle(db, opts...),
		Category: newCategory(db, opts...),
		Comment:  newComment(db, opts...),
		Danmu:    newDanmu(db, opts...),
		History:  newHistory(db, opts...),
		Live:     newLive(db, opts...),
		Tag:      newTag(db, opts...),
		User:     newUser(db, opts...),
		Video:    newVideo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Article  article
	Category category
	Comment  comment
	Danmu    danmu
	History  history
	Live     live
	Tag      tag
	User     user
	Video    video
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Article:  q.Article.clone(db),
		Category: q.Category.clone(db),
		Comment:  q.Comment.clone(db),
		Danmu:    q.Danmu.clone(db),
		History:  q.History.clone(db),
		Live:     q.Live.clone(db),
		Tag:      q.Tag.clone(db),
		User:     q.User.clone(db),
		Video:    q.Video.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Article:  q.Article.replaceDB(db),
		Category: q.Category.replaceDB(db),
		Comment:  q.Comment.replaceDB(db),
		Danmu:    q.Danmu.replaceDB(db),
		History:  q.History.replaceDB(db),
		Live:     q.Live.replaceDB(db),
		Tag:      q.Tag.replaceDB(db),
		User:     q.User.replaceDB(db),
		Video:    q.Video.replaceDB(db),
	}
}

type queryCtx struct {
	Article  IArticleDo
	Category ICategoryDo
	Comment  ICommentDo
	Danmu    IDanmuDo
	History  IHistoryDo
	Live     ILiveDo
	Tag      ITagDo
	User     IUserDo
	Video    IVideoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Article:  q.Article.WithContext(ctx),
		Category: q.Category.WithContext(ctx),
		Comment:  q.Comment.WithContext(ctx),
		Danmu:    q.Danmu.WithContext(ctx),
		History:  q.History.WithContext(ctx),
		Live:     q.Live.WithContext(ctx),
		Tag:      q.Tag.WithContext(ctx),
		User:     q.User.WithContext(ctx),
		Video:    q.Video.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
