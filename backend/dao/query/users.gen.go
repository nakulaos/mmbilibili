// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/dao/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewUint(tableName, "id")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.Username = field.NewString(tableName, "username")
	_user.Nickname = field.NewString(tableName, "nickname")
	_user.Description = field.NewString(tableName, "description")
	_user.Status = field.NewUint(tableName, "status")
	_user.Phone = field.NewString(tableName, "phone")
	_user.Email = field.NewString(tableName, "email")
	_user.Password = field.NewString(tableName, "password")
	_user.Avatar = field.NewString(tableName, "avatar")
	_user.Role = field.NewUint(tableName, "role")
	_user.Gender = field.NewUint(tableName, "gender")
	_user.Salt = field.NewString(tableName, "salt")
	_user.RoomID = field.NewUint(tableName, "room_id")
	_user.Videos = userHasManyVideos{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Videos", "model.Video"),
		Comments: struct {
			field.RelationField
			Replies struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Videos.Comments", "model.Comment"),
			Replies: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Videos.Comments.Replies", "model.Comment"),
			},
		},
		Danmu: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Videos.Danmu", "model.Danmu"),
		},
		Tags: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Videos.Tags", "model.Tag"),
		},
		Categories: struct {
			field.RelationField
			Tags struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Videos.Categories", "model.Category"),
			Tags: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Videos.Categories.Tags", "model.Tag"),
			},
		},
	}

	_user.Comments = userHasManyComments{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Comments", "model.Comment"),
	}

	_user.Danmus = userHasManyDanmus{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Danmus", "model.Danmu"),
	}

	_user.Lives = userHasManyLives{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Lives", "model.Live"),
		Danmus: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Lives.Danmus", "model.Danmu"),
		},
		Categories: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Lives.Categories", "model.Category"),
		},
		Tags: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Lives.Tags", "model.Tag"),
		},
		FavoriteUser: struct {
			field.RelationField
			Videos struct {
				field.RelationField
			}
			Comments struct {
				field.RelationField
			}
			Danmus struct {
				field.RelationField
			}
			Lives struct {
				field.RelationField
			}
			FavoriteVideos struct {
				field.RelationField
			}
			StarVideos struct {
				field.RelationField
			}
			FavoriteArticle struct {
				field.RelationField
				Comments struct {
					field.RelationField
				}
				Categories struct {
					field.RelationField
				}
				Tags struct {
					field.RelationField
				}
			}
			StarArticles struct {
				field.RelationField
			}
			FavoriteLives struct {
				field.RelationField
			}
			Followers struct {
				field.RelationField
			}
			Following struct {
				field.RelationField
			}
			Tag struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Lives.FavoriteUser", "model.User"),
			Videos: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Videos", "model.Video"),
			},
			Comments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Comments", "model.Comment"),
			},
			Danmus: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Danmus", "model.Danmu"),
			},
			Lives: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Lives", "model.Live"),
			},
			FavoriteVideos: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.FavoriteVideos", "model.Video"),
			},
			StarVideos: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.StarVideos", "model.Video"),
			},
			FavoriteArticle: struct {
				field.RelationField
				Comments struct {
					field.RelationField
				}
				Categories struct {
					field.RelationField
				}
				Tags struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.FavoriteArticle", "model.Article"),
				Comments: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Lives.FavoriteUser.FavoriteArticle.Comments", "model.Comment"),
				},
				Categories: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Lives.FavoriteUser.FavoriteArticle.Categories", "model.Category"),
				},
				Tags: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Lives.FavoriteUser.FavoriteArticle.Tags", "model.Tag"),
				},
			},
			StarArticles: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.StarArticles", "model.Article"),
			},
			FavoriteLives: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.FavoriteLives", "model.Live"),
			},
			Followers: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Followers", "model.User"),
			},
			Following: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Following", "model.User"),
			},
			Tag: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Lives.FavoriteUser.Tag", "model.Tag"),
			},
		},
	}

	_user.FavoriteVideos = userManyToManyFavoriteVideos{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FavoriteVideos", "model.Video"),
	}

	_user.StarVideos = userManyToManyStarVideos{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("StarVideos", "model.Video"),
	}

	_user.FavoriteArticle = userManyToManyFavoriteArticle{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FavoriteArticle", "model.Article"),
	}

	_user.StarArticles = userManyToManyStarArticles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("StarArticles", "model.Article"),
	}

	_user.FavoriteLives = userManyToManyFavoriteLives{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FavoriteLives", "model.Live"),
	}

	_user.Followers = userManyToManyFollowers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Followers", "model.User"),
	}

	_user.Following = userManyToManyFollowing{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Following", "model.User"),
	}

	_user.Tag = userManyToManyTag{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tag", "model.Tag"),
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo userDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Username    field.String
	Nickname    field.String
	Description field.String
	Status      field.Uint
	Phone       field.String
	Email       field.String
	Password    field.String
	Avatar      field.String
	Role        field.Uint
	Gender      field.Uint
	Salt        field.String
	RoomID      field.Uint
	Videos      userHasManyVideos

	Comments userHasManyComments

	Danmus userHasManyDanmus

	Lives userHasManyLives

	FavoriteVideos userManyToManyFavoriteVideos

	StarVideos userManyToManyStarVideos

	FavoriteArticle userManyToManyFavoriteArticle

	StarArticles userManyToManyStarArticles

	FavoriteLives userManyToManyFavoriteLives

	Followers userManyToManyFollowers

	Following userManyToManyFollowing

	Tag userManyToManyTag

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Username = field.NewString(table, "username")
	u.Nickname = field.NewString(table, "nickname")
	u.Description = field.NewString(table, "description")
	u.Status = field.NewUint(table, "status")
	u.Phone = field.NewString(table, "phone")
	u.Email = field.NewString(table, "email")
	u.Password = field.NewString(table, "password")
	u.Avatar = field.NewString(table, "avatar")
	u.Role = field.NewUint(table, "role")
	u.Gender = field.NewUint(table, "gender")
	u.Salt = field.NewString(table, "salt")
	u.RoomID = field.NewUint(table, "room_id")

	u.fillFieldMap()

	return u
}

func (u *user) WithContext(ctx context.Context) IUserDo { return u.userDo.WithContext(ctx) }

func (u user) TableName() string { return u.userDo.TableName() }

func (u user) Alias() string { return u.userDo.Alias() }

func (u user) Columns(cols ...field.Expr) gen.Columns { return u.userDo.Columns(cols...) }

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 28)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["username"] = u.Username
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["description"] = u.Description
	u.fieldMap["status"] = u.Status
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["email"] = u.Email
	u.fieldMap["password"] = u.Password
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["role"] = u.Role
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["salt"] = u.Salt
	u.fieldMap["room_id"] = u.RoomID

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userHasManyVideos struct {
	db *gorm.DB

	field.RelationField

	Comments struct {
		field.RelationField
		Replies struct {
			field.RelationField
		}
	}
	Danmu struct {
		field.RelationField
	}
	Tags struct {
		field.RelationField
	}
	Categories struct {
		field.RelationField
		Tags struct {
			field.RelationField
		}
	}
}

func (a userHasManyVideos) Where(conds ...field.Expr) *userHasManyVideos {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyVideos) WithContext(ctx context.Context) *userHasManyVideos {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyVideos) Session(session *gorm.Session) *userHasManyVideos {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyVideos) Model(m *model.User) *userHasManyVideosTx {
	return &userHasManyVideosTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyVideosTx struct{ tx *gorm.Association }

func (a userHasManyVideosTx) Find() (result []*model.Video, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyVideosTx) Append(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyVideosTx) Replace(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyVideosTx) Delete(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyVideosTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyVideosTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyComments struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyComments) Where(conds ...field.Expr) *userHasManyComments {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyComments) WithContext(ctx context.Context) *userHasManyComments {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyComments) Session(session *gorm.Session) *userHasManyComments {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyComments) Model(m *model.User) *userHasManyCommentsTx {
	return &userHasManyCommentsTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyCommentsTx struct{ tx *gorm.Association }

func (a userHasManyCommentsTx) Find() (result []*model.Comment, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyCommentsTx) Append(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyCommentsTx) Replace(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyCommentsTx) Delete(values ...*model.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyCommentsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyCommentsTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyDanmus struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyDanmus) Where(conds ...field.Expr) *userHasManyDanmus {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyDanmus) WithContext(ctx context.Context) *userHasManyDanmus {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyDanmus) Session(session *gorm.Session) *userHasManyDanmus {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyDanmus) Model(m *model.User) *userHasManyDanmusTx {
	return &userHasManyDanmusTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyDanmusTx struct{ tx *gorm.Association }

func (a userHasManyDanmusTx) Find() (result []*model.Danmu, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyDanmusTx) Append(values ...*model.Danmu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyDanmusTx) Replace(values ...*model.Danmu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyDanmusTx) Delete(values ...*model.Danmu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyDanmusTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyDanmusTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyLives struct {
	db *gorm.DB

	field.RelationField

	Danmus struct {
		field.RelationField
	}
	Categories struct {
		field.RelationField
	}
	Tags struct {
		field.RelationField
	}
	FavoriteUser struct {
		field.RelationField
		Videos struct {
			field.RelationField
		}
		Comments struct {
			field.RelationField
		}
		Danmus struct {
			field.RelationField
		}
		Lives struct {
			field.RelationField
		}
		FavoriteVideos struct {
			field.RelationField
		}
		StarVideos struct {
			field.RelationField
		}
		FavoriteArticle struct {
			field.RelationField
			Comments struct {
				field.RelationField
			}
			Categories struct {
				field.RelationField
			}
			Tags struct {
				field.RelationField
			}
		}
		StarArticles struct {
			field.RelationField
		}
		FavoriteLives struct {
			field.RelationField
		}
		Followers struct {
			field.RelationField
		}
		Following struct {
			field.RelationField
		}
		Tag struct {
			field.RelationField
		}
	}
}

func (a userHasManyLives) Where(conds ...field.Expr) *userHasManyLives {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyLives) WithContext(ctx context.Context) *userHasManyLives {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyLives) Session(session *gorm.Session) *userHasManyLives {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyLives) Model(m *model.User) *userHasManyLivesTx {
	return &userHasManyLivesTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyLivesTx struct{ tx *gorm.Association }

func (a userHasManyLivesTx) Find() (result []*model.Live, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyLivesTx) Append(values ...*model.Live) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyLivesTx) Replace(values ...*model.Live) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyLivesTx) Delete(values ...*model.Live) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyLivesTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyLivesTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFavoriteVideos struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyFavoriteVideos) Where(conds ...field.Expr) *userManyToManyFavoriteVideos {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFavoriteVideos) WithContext(ctx context.Context) *userManyToManyFavoriteVideos {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFavoriteVideos) Session(session *gorm.Session) *userManyToManyFavoriteVideos {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFavoriteVideos) Model(m *model.User) *userManyToManyFavoriteVideosTx {
	return &userManyToManyFavoriteVideosTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFavoriteVideosTx struct{ tx *gorm.Association }

func (a userManyToManyFavoriteVideosTx) Find() (result []*model.Video, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFavoriteVideosTx) Append(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFavoriteVideosTx) Replace(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFavoriteVideosTx) Delete(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFavoriteVideosTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFavoriteVideosTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyStarVideos struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyStarVideos) Where(conds ...field.Expr) *userManyToManyStarVideos {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyStarVideos) WithContext(ctx context.Context) *userManyToManyStarVideos {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyStarVideos) Session(session *gorm.Session) *userManyToManyStarVideos {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyStarVideos) Model(m *model.User) *userManyToManyStarVideosTx {
	return &userManyToManyStarVideosTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyStarVideosTx struct{ tx *gorm.Association }

func (a userManyToManyStarVideosTx) Find() (result []*model.Video, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyStarVideosTx) Append(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyStarVideosTx) Replace(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyStarVideosTx) Delete(values ...*model.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyStarVideosTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyStarVideosTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFavoriteArticle struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyFavoriteArticle) Where(conds ...field.Expr) *userManyToManyFavoriteArticle {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFavoriteArticle) WithContext(ctx context.Context) *userManyToManyFavoriteArticle {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFavoriteArticle) Session(session *gorm.Session) *userManyToManyFavoriteArticle {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFavoriteArticle) Model(m *model.User) *userManyToManyFavoriteArticleTx {
	return &userManyToManyFavoriteArticleTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFavoriteArticleTx struct{ tx *gorm.Association }

func (a userManyToManyFavoriteArticleTx) Find() (result []*model.Article, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFavoriteArticleTx) Append(values ...*model.Article) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFavoriteArticleTx) Replace(values ...*model.Article) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFavoriteArticleTx) Delete(values ...*model.Article) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFavoriteArticleTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFavoriteArticleTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyStarArticles struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyStarArticles) Where(conds ...field.Expr) *userManyToManyStarArticles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyStarArticles) WithContext(ctx context.Context) *userManyToManyStarArticles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyStarArticles) Session(session *gorm.Session) *userManyToManyStarArticles {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyStarArticles) Model(m *model.User) *userManyToManyStarArticlesTx {
	return &userManyToManyStarArticlesTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyStarArticlesTx struct{ tx *gorm.Association }

func (a userManyToManyStarArticlesTx) Find() (result []*model.Article, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyStarArticlesTx) Append(values ...*model.Article) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyStarArticlesTx) Replace(values ...*model.Article) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyStarArticlesTx) Delete(values ...*model.Article) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyStarArticlesTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyStarArticlesTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFavoriteLives struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyFavoriteLives) Where(conds ...field.Expr) *userManyToManyFavoriteLives {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFavoriteLives) WithContext(ctx context.Context) *userManyToManyFavoriteLives {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFavoriteLives) Session(session *gorm.Session) *userManyToManyFavoriteLives {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFavoriteLives) Model(m *model.User) *userManyToManyFavoriteLivesTx {
	return &userManyToManyFavoriteLivesTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFavoriteLivesTx struct{ tx *gorm.Association }

func (a userManyToManyFavoriteLivesTx) Find() (result []*model.Live, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFavoriteLivesTx) Append(values ...*model.Live) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFavoriteLivesTx) Replace(values ...*model.Live) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFavoriteLivesTx) Delete(values ...*model.Live) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFavoriteLivesTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFavoriteLivesTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFollowers struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyFollowers) Where(conds ...field.Expr) *userManyToManyFollowers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFollowers) WithContext(ctx context.Context) *userManyToManyFollowers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFollowers) Session(session *gorm.Session) *userManyToManyFollowers {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFollowers) Model(m *model.User) *userManyToManyFollowersTx {
	return &userManyToManyFollowersTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFollowersTx struct{ tx *gorm.Association }

func (a userManyToManyFollowersTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFollowersTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFollowersTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFollowersTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFollowersTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFollowersTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFollowing struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyFollowing) Where(conds ...field.Expr) *userManyToManyFollowing {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFollowing) WithContext(ctx context.Context) *userManyToManyFollowing {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFollowing) Session(session *gorm.Session) *userManyToManyFollowing {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFollowing) Model(m *model.User) *userManyToManyFollowingTx {
	return &userManyToManyFollowingTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFollowingTx struct{ tx *gorm.Association }

func (a userManyToManyFollowingTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFollowingTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFollowingTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFollowingTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFollowingTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFollowingTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyTag struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyTag) Where(conds ...field.Expr) *userManyToManyTag {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyTag) WithContext(ctx context.Context) *userManyToManyTag {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyTag) Session(session *gorm.Session) *userManyToManyTag {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyTag) Model(m *model.User) *userManyToManyTagTx {
	return &userManyToManyTagTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyTagTx struct{ tx *gorm.Association }

func (a userManyToManyTagTx) Find() (result []*model.Tag, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyTagTx) Append(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyTagTx) Replace(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyTagTx) Delete(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyTagTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyTagTx) Count() int64 {
	return a.tx.Count()
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
