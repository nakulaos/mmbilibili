// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/dao/model"
)

func newLive(db *gorm.DB, opts ...gen.DOOption) live {
	_live := live{}

	_live.liveDo.UseDB(db, opts...)
	_live.liveDo.UseModel(&model.Live{})

	tableName := _live.liveDo.TableName()
	_live.ALL = field.NewAsterisk(tableName)
	_live.UID = field.NewUint(tableName, "uid")
	_live.Title = field.NewString(tableName, "title")
	_live.Description = field.NewString(tableName, "description")
	_live.StartTime = field.NewTime(tableName, "start_time")
	_live.EndTime = field.NewTime(tableName, "end_time")
	_live.Status = field.NewUint8(tableName, "status")
	_live.PlayURL = field.NewString(tableName, "play_url")
	_live.CoverURL = field.NewString(tableName, "cover_url")
	_live.StreamID = field.NewUint(tableName, "stream_id")
	_live.IsOver = field.NewInt(tableName, "is_over")
	_live.RoomID = field.NewUint(tableName, "room_id")
	_live.PushToken = field.NewString(tableName, "push_token")
	_live.PlayToken = field.NewString(tableName, "play_token")
	_live.Partition = field.NewString(tableName, "partition")
	_live.ID = field.NewUint(tableName, "id")
	_live.CreatedAt = field.NewTime(tableName, "created_at")
	_live.UpdatedAt = field.NewTime(tableName, "updated_at")
	_live.DeletedAt = field.NewField(tableName, "deleted_at")
	_live.Danmus = liveHasManyDanmus{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Danmus", "model.Danmu"),
	}

	_live.Categories = liveManyToManyCategories{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Categories", "model.Category"),
		Tags: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Categories.Tags", "model.Tag"),
		},
	}

	_live.Tags = liveManyToManyTags{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tags", "model.Tag"),
	}

	_live.FavoriteUser = liveManyToManyFavoriteUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FavoriteUser", "model.User"),
		Videos: struct {
			field.RelationField
			Comments struct {
				field.RelationField
				Replies struct {
					field.RelationField
				}
			}
			Danmu struct {
				field.RelationField
			}
			Tags struct {
				field.RelationField
			}
			Categories struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("FavoriteUser.Videos", "model.Video"),
			Comments: struct {
				field.RelationField
				Replies struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("FavoriteUser.Videos.Comments", "model.Comment"),
				Replies: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("FavoriteUser.Videos.Comments.Replies", "model.Comment"),
				},
			},
			Danmu: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Videos.Danmu", "model.Danmu"),
			},
			Tags: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Videos.Tags", "model.Tag"),
			},
			Categories: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Videos.Categories", "model.Category"),
			},
		},
		Comments: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.Comments", "model.Comment"),
		},
		Danmus: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.Danmus", "model.Danmu"),
		},
		Lives: struct {
			field.RelationField
			Danmus struct {
				field.RelationField
			}
			Categories struct {
				field.RelationField
			}
			Tags struct {
				field.RelationField
			}
			FavoriteUser struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("FavoriteUser.Lives", "model.Live"),
			Danmus: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Lives.Danmus", "model.Danmu"),
			},
			Categories: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Lives.Categories", "model.Category"),
			},
			Tags: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Lives.Tags", "model.Tag"),
			},
			FavoriteUser: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.Lives.FavoriteUser", "model.User"),
			},
		},
		FavoriteVideos: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.FavoriteVideos", "model.Video"),
		},
		StarVideos: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.StarVideos", "model.Video"),
		},
		FavoriteArticle: struct {
			field.RelationField
			Comments struct {
				field.RelationField
			}
			Categories struct {
				field.RelationField
			}
			Tags struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("FavoriteUser.FavoriteArticle", "model.Article"),
			Comments: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.FavoriteArticle.Comments", "model.Comment"),
			},
			Categories: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.FavoriteArticle.Categories", "model.Category"),
			},
			Tags: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("FavoriteUser.FavoriteArticle.Tags", "model.Tag"),
			},
		},
		StarArticles: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.StarArticles", "model.Article"),
		},
		FavoriteLives: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.FavoriteLives", "model.Live"),
		},
		Followers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.Followers", "model.User"),
		},
		Following: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.Following", "model.User"),
		},
		Tag: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FavoriteUser.Tag", "model.Tag"),
		},
	}

	_live.fillFieldMap()

	return _live
}

type live struct {
	liveDo liveDo

	ALL         field.Asterisk
	UID         field.Uint
	Title       field.String
	Description field.String
	StartTime   field.Time
	EndTime     field.Time
	Status      field.Uint8
	PlayURL     field.String
	CoverURL    field.String
	StreamID    field.Uint
	IsOver      field.Int
	RoomID      field.Uint
	PushToken   field.String
	PlayToken   field.String
	Partition   field.String
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Danmus      liveHasManyDanmus

	Categories liveManyToManyCategories

	Tags liveManyToManyTags

	FavoriteUser liveManyToManyFavoriteUser

	fieldMap map[string]field.Expr
}

func (l live) Table(newTableName string) *live {
	l.liveDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l live) As(alias string) *live {
	l.liveDo.DO = *(l.liveDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *live) updateTableName(table string) *live {
	l.ALL = field.NewAsterisk(table)
	l.UID = field.NewUint(table, "uid")
	l.Title = field.NewString(table, "title")
	l.Description = field.NewString(table, "description")
	l.StartTime = field.NewTime(table, "start_time")
	l.EndTime = field.NewTime(table, "end_time")
	l.Status = field.NewUint8(table, "status")
	l.PlayURL = field.NewString(table, "play_url")
	l.CoverURL = field.NewString(table, "cover_url")
	l.StreamID = field.NewUint(table, "stream_id")
	l.IsOver = field.NewInt(table, "is_over")
	l.RoomID = field.NewUint(table, "room_id")
	l.PushToken = field.NewString(table, "push_token")
	l.PlayToken = field.NewString(table, "play_token")
	l.Partition = field.NewString(table, "partition")
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")

	l.fillFieldMap()

	return l
}

func (l *live) WithContext(ctx context.Context) ILiveDo { return l.liveDo.WithContext(ctx) }

func (l live) TableName() string { return l.liveDo.TableName() }

func (l live) Alias() string { return l.liveDo.Alias() }

func (l live) Columns(cols ...field.Expr) gen.Columns { return l.liveDo.Columns(cols...) }

func (l *live) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *live) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 22)
	l.fieldMap["uid"] = l.UID
	l.fieldMap["title"] = l.Title
	l.fieldMap["description"] = l.Description
	l.fieldMap["start_time"] = l.StartTime
	l.fieldMap["end_time"] = l.EndTime
	l.fieldMap["status"] = l.Status
	l.fieldMap["play_url"] = l.PlayURL
	l.fieldMap["cover_url"] = l.CoverURL
	l.fieldMap["stream_id"] = l.StreamID
	l.fieldMap["is_over"] = l.IsOver
	l.fieldMap["room_id"] = l.RoomID
	l.fieldMap["push_token"] = l.PushToken
	l.fieldMap["play_token"] = l.PlayToken
	l.fieldMap["partition"] = l.Partition
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt

}

func (l live) clone(db *gorm.DB) live {
	l.liveDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l live) replaceDB(db *gorm.DB) live {
	l.liveDo.ReplaceDB(db)
	return l
}

type liveHasManyDanmus struct {
	db *gorm.DB

	field.RelationField
}

func (a liveHasManyDanmus) Where(conds ...field.Expr) *liveHasManyDanmus {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a liveHasManyDanmus) WithContext(ctx context.Context) *liveHasManyDanmus {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a liveHasManyDanmus) Session(session *gorm.Session) *liveHasManyDanmus {
	a.db = a.db.Session(session)
	return &a
}

func (a liveHasManyDanmus) Model(m *model.Live) *liveHasManyDanmusTx {
	return &liveHasManyDanmusTx{a.db.Model(m).Association(a.Name())}
}

type liveHasManyDanmusTx struct{ tx *gorm.Association }

func (a liveHasManyDanmusTx) Find() (result []*model.Danmu, err error) {
	return result, a.tx.Find(&result)
}

func (a liveHasManyDanmusTx) Append(values ...*model.Danmu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a liveHasManyDanmusTx) Replace(values ...*model.Danmu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a liveHasManyDanmusTx) Delete(values ...*model.Danmu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a liveHasManyDanmusTx) Clear() error {
	return a.tx.Clear()
}

func (a liveHasManyDanmusTx) Count() int64 {
	return a.tx.Count()
}

type liveManyToManyCategories struct {
	db *gorm.DB

	field.RelationField

	Tags struct {
		field.RelationField
	}
}

func (a liveManyToManyCategories) Where(conds ...field.Expr) *liveManyToManyCategories {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a liveManyToManyCategories) WithContext(ctx context.Context) *liveManyToManyCategories {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a liveManyToManyCategories) Session(session *gorm.Session) *liveManyToManyCategories {
	a.db = a.db.Session(session)
	return &a
}

func (a liveManyToManyCategories) Model(m *model.Live) *liveManyToManyCategoriesTx {
	return &liveManyToManyCategoriesTx{a.db.Model(m).Association(a.Name())}
}

type liveManyToManyCategoriesTx struct{ tx *gorm.Association }

func (a liveManyToManyCategoriesTx) Find() (result []*model.Category, err error) {
	return result, a.tx.Find(&result)
}

func (a liveManyToManyCategoriesTx) Append(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a liveManyToManyCategoriesTx) Replace(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a liveManyToManyCategoriesTx) Delete(values ...*model.Category) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a liveManyToManyCategoriesTx) Clear() error {
	return a.tx.Clear()
}

func (a liveManyToManyCategoriesTx) Count() int64 {
	return a.tx.Count()
}

type liveManyToManyTags struct {
	db *gorm.DB

	field.RelationField
}

func (a liveManyToManyTags) Where(conds ...field.Expr) *liveManyToManyTags {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a liveManyToManyTags) WithContext(ctx context.Context) *liveManyToManyTags {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a liveManyToManyTags) Session(session *gorm.Session) *liveManyToManyTags {
	a.db = a.db.Session(session)
	return &a
}

func (a liveManyToManyTags) Model(m *model.Live) *liveManyToManyTagsTx {
	return &liveManyToManyTagsTx{a.db.Model(m).Association(a.Name())}
}

type liveManyToManyTagsTx struct{ tx *gorm.Association }

func (a liveManyToManyTagsTx) Find() (result []*model.Tag, err error) {
	return result, a.tx.Find(&result)
}

func (a liveManyToManyTagsTx) Append(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a liveManyToManyTagsTx) Replace(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a liveManyToManyTagsTx) Delete(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a liveManyToManyTagsTx) Clear() error {
	return a.tx.Clear()
}

func (a liveManyToManyTagsTx) Count() int64 {
	return a.tx.Count()
}

type liveManyToManyFavoriteUser struct {
	db *gorm.DB

	field.RelationField

	Videos struct {
		field.RelationField
		Comments struct {
			field.RelationField
			Replies struct {
				field.RelationField
			}
		}
		Danmu struct {
			field.RelationField
		}
		Tags struct {
			field.RelationField
		}
		Categories struct {
			field.RelationField
		}
	}
	Comments struct {
		field.RelationField
	}
	Danmus struct {
		field.RelationField
	}
	Lives struct {
		field.RelationField
		Danmus struct {
			field.RelationField
		}
		Categories struct {
			field.RelationField
		}
		Tags struct {
			field.RelationField
		}
		FavoriteUser struct {
			field.RelationField
		}
	}
	FavoriteVideos struct {
		field.RelationField
	}
	StarVideos struct {
		field.RelationField
	}
	FavoriteArticle struct {
		field.RelationField
		Comments struct {
			field.RelationField
		}
		Categories struct {
			field.RelationField
		}
		Tags struct {
			field.RelationField
		}
	}
	StarArticles struct {
		field.RelationField
	}
	FavoriteLives struct {
		field.RelationField
	}
	Followers struct {
		field.RelationField
	}
	Following struct {
		field.RelationField
	}
	Tag struct {
		field.RelationField
	}
}

func (a liveManyToManyFavoriteUser) Where(conds ...field.Expr) *liveManyToManyFavoriteUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a liveManyToManyFavoriteUser) WithContext(ctx context.Context) *liveManyToManyFavoriteUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a liveManyToManyFavoriteUser) Session(session *gorm.Session) *liveManyToManyFavoriteUser {
	a.db = a.db.Session(session)
	return &a
}

func (a liveManyToManyFavoriteUser) Model(m *model.Live) *liveManyToManyFavoriteUserTx {
	return &liveManyToManyFavoriteUserTx{a.db.Model(m).Association(a.Name())}
}

type liveManyToManyFavoriteUserTx struct{ tx *gorm.Association }

func (a liveManyToManyFavoriteUserTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a liveManyToManyFavoriteUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a liveManyToManyFavoriteUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a liveManyToManyFavoriteUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a liveManyToManyFavoriteUserTx) Clear() error {
	return a.tx.Clear()
}

func (a liveManyToManyFavoriteUserTx) Count() int64 {
	return a.tx.Count()
}

type liveDo struct{ gen.DO }

type ILiveDo interface {
	gen.SubQuery
	Debug() ILiveDo
	WithContext(ctx context.Context) ILiveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveDo
	WriteDB() ILiveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveDo
	Not(conds ...gen.Condition) ILiveDo
	Or(conds ...gen.Condition) ILiveDo
	Select(conds ...field.Expr) ILiveDo
	Where(conds ...gen.Condition) ILiveDo
	Order(conds ...field.Expr) ILiveDo
	Distinct(cols ...field.Expr) ILiveDo
	Omit(cols ...field.Expr) ILiveDo
	Join(table schema.Tabler, on ...field.Expr) ILiveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveDo
	Group(cols ...field.Expr) ILiveDo
	Having(conds ...gen.Condition) ILiveDo
	Limit(limit int) ILiveDo
	Offset(offset int) ILiveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveDo
	Unscoped() ILiveDo
	Create(values ...*model.Live) error
	CreateInBatches(values []*model.Live, batchSize int) error
	Save(values ...*model.Live) error
	First() (*model.Live, error)
	Take() (*model.Live, error)
	Last() (*model.Live, error)
	Find() ([]*model.Live, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Live, err error)
	FindInBatches(result *[]*model.Live, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Live) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveDo
	Assign(attrs ...field.AssignExpr) ILiveDo
	Joins(fields ...field.RelationField) ILiveDo
	Preload(fields ...field.RelationField) ILiveDo
	FirstOrInit() (*model.Live, error)
	FirstOrCreate() (*model.Live, error)
	FindByPage(offset int, limit int) (result []*model.Live, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveDo) Debug() ILiveDo {
	return l.withDO(l.DO.Debug())
}

func (l liveDo) WithContext(ctx context.Context) ILiveDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveDo) ReadDB() ILiveDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveDo) WriteDB() ILiveDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveDo) Session(config *gorm.Session) ILiveDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveDo) Clauses(conds ...clause.Expression) ILiveDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveDo) Returning(value interface{}, columns ...string) ILiveDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveDo) Not(conds ...gen.Condition) ILiveDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveDo) Or(conds ...gen.Condition) ILiveDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveDo) Select(conds ...field.Expr) ILiveDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveDo) Where(conds ...gen.Condition) ILiveDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveDo) Order(conds ...field.Expr) ILiveDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveDo) Distinct(cols ...field.Expr) ILiveDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveDo) Omit(cols ...field.Expr) ILiveDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveDo) Join(table schema.Tabler, on ...field.Expr) ILiveDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveDo) Group(cols ...field.Expr) ILiveDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveDo) Having(conds ...gen.Condition) ILiveDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveDo) Limit(limit int) ILiveDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveDo) Offset(offset int) ILiveDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveDo) Unscoped() ILiveDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveDo) Create(values ...*model.Live) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveDo) CreateInBatches(values []*model.Live, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveDo) Save(values ...*model.Live) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveDo) First() (*model.Live, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Live), nil
	}
}

func (l liveDo) Take() (*model.Live, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Live), nil
	}
}

func (l liveDo) Last() (*model.Live, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Live), nil
	}
}

func (l liveDo) Find() ([]*model.Live, error) {
	result, err := l.DO.Find()
	return result.([]*model.Live), err
}

func (l liveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Live, err error) {
	buf := make([]*model.Live, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveDo) FindInBatches(result *[]*model.Live, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveDo) Attrs(attrs ...field.AssignExpr) ILiveDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveDo) Assign(attrs ...field.AssignExpr) ILiveDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveDo) Joins(fields ...field.RelationField) ILiveDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveDo) Preload(fields ...field.RelationField) ILiveDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveDo) FirstOrInit() (*model.Live, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Live), nil
	}
}

func (l liveDo) FirstOrCreate() (*model.Live, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Live), nil
	}
}

func (l liveDo) FindByPage(offset int, limit int) (result []*model.Live, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveDo) Delete(models ...*model.Live) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveDo) withDO(do gen.Dao) *liveDo {
	l.DO = *do.(*gen.DO)
	return l
}
